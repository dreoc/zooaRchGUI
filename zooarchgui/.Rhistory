),
parent = c(
0,
1, 1, 1, 1, 1
)
)
addMenu(plottingMenu, plottingFun, topMenu)
#Counting Menu
countingFun <- c(
NA,
NA, NA, NA, NA,
function() fun_na(), function() fun_na(), function() fun_na(), function() fun_na(),
function() fun_na(), function() fun_na(),
function() fun_na(), function() fun_na(),
function() fun_na(), function() fun_na(), function() fun_na(), function() fun_na()
)
countingMenu <- data.frame(
label = c(
"Counting",
"Tabulation", "LP-Index", "ABCML", "Sexing",
"MNI", "MNE", "MAU", "%MAU",
"LP", "LP2",
"ABCML", "ABCML",
"Regression", "DFA", "Kernel Density", "Mixing-Model"
),
parent = c(
0,
1, 1, 1, 1,
2, 2, 2, 2,
3, 3,
4, 4,
5, 5, 5, 5
)
)
addMenu(countingMenu, countingFun, topMenu)
#Transformation Menu
transFun <- c(
NA,
NA, NA,
function() configurableCmd("trans", 2),
function() configurableCmd("LSI", 0), function() configurableCmd("VSI", 0)
)
transMenu <- data.frame(
label = c(
"Transformations",
"Mathematical", "Zooarchaeological",
"Mathematical",
"LSI", "VSI"
),
parent = c(
0,
1, 1,
2,
3, 3
)
)
addMenu(transMenu, transFun, topMenu)
#Sampling Menu
sampFun <- c(NA, function() configurableCmd("s_rare", 2), function() configurableCmd("s_rare", 2))
sampMenu <- data.frame(
label = c("Sampling", "Single Sample Rarefaction", "Multiple Sample Rarefaction"),
parent = c(0, 1, 1)
)
addMenu(sampMenu, sampFun, topMenu)
#Diversity Menu
divFun <- c(NA, NA, function() configurableCmd("divind"))
divMenu <- data.frame(
label = c("Diversity", "Diversity", "Indices"),
parent = c(0, 1, 2)
)
addMenu(divMenu, divFun, topMenu)
#Univariate Menu
univFun <- c(
NA,
NA, NA, NA, NA, NA, NA, NA,
function() configurableCmd("summar", 2),
function() configurableCmd("shapiro", 2), function() configurableCmd("ks", 2),
function() configurableCmd("onesam_t", 2), function() configurableCmd("t", 3), function() configurableCmd("oneway", 3, "hor"), function() configurableCmd("fact", 4, "hor2"),
function() configurableCmd("chisq", 3), function() configurableCmd("Fisher_exact", 3),
function() configurableCmd("F_var", 3), function() configurableCmd("bartletts", 3), function() configurableCmd("LevenesVarTest", 3),
function() configurableCmd("Assoc", 3), function() configurableCmd("simp_lm", 3, "hor"), function() configurableCmd("glm", 4, "hor2"),
function() configurableCmd("death_age", 0)
)
univMenu <- data.frame(
label = c(
"Univariate Statistics",
"Summary Statistics","Normality Tests", "Means","Proportions","Variances","Association","Survivorship",
"Summary Dialog",
"Shapiro-Wilk's Test", "Kolmogorov-Smirnov Test",
"One Sample t-test", "Two Sample t-test", "One-way ANOVA", "Factorial ANOVA",
"Chi Squared (row-by-column tests)", "Fisher's Exact Test",
"F-test", "Bartlett's Test", "Levene's",
"Correlation", "Simple Linear Regression", "Generalized Linear Model",
"Survivorship"
),
parent = c(
0,
1, 1, 1, 1, 1, 1, 1,
2,
3, 3,
4, 4, 4, 4,
5, 5,
6, 6, 6,
7, 7, 7,
8
)
)
addMenu(univMenu, univFun, topMenu)
#Multivariate Menu
multivFun <- c(
NA,
NA, NA, NA, NA, NA, NA,
function() configurableCmd("dist", 2),
function() fun_na(), function() configurableCmd("NPHotellingt", 3),
function() configurableCmd("parMANOVA", 3, "hor"), function() configurableCmd("NPMANOVA", 3, "hor"),
function() configurableCmd("mantel2way", 0), function() configurableCmd("mantel3", 0),
function() fun_na(), function() configurableCmd("prcomp", 2), function() configurableCmd("PCoA", 2), function() configurableCmd("NMDS", 0), function() configurableCmd("correspondence", 3), function() configurableCmd("multivarfit", 0),
function() configurableCmd("cluster", 0), NA,
function() configurableCmd("kmeans_single", 0), function() configurableCmd("kmeans_multi", 0)
)
multivMenu <- data.frame(
label = c(
"Multivariate Statistics",
"D-Matrices","Hotelling T Tests", "MANOVA","Mantel Tests","Ordination","Clustering",
"D-Matrices",
"One Sample", "Two Sample",
"MANOVA", "NP-MANOVA",
"2-way Mantel", "3-way Mantel",
"Seriation", "PCA", "PCoA", "NMDS", "CA", "Vector Fitting",
"Hierarchical", "K-means",
"Single K-means", "Multi K-means"
),
parent = c(
0,
1, 1, 1, 1, 1, 1,
2,
3, 3,
4, 4,
5, 5,
6, 6, 6, 6, 6, 6,
7, 7,
22, 22
)
)
addMenu(multivMenu, multivFun, topMenu)
#Modeling Menu
#Spatial Menu
spatFun <- c(
NA,
NA, NA, NA, NA, NA,
function() configurableCmd("ripleys_K", 1),
function() fun_na(),
function() configurableCmd("moran_geary", 0), function() fun_na(), function() fun_na(),
function() fun_na(), function() fun_na(), function() fun_na(),
function() fun_na(), function() fun_na(), function() fun_na()
)
spatMenu <- data.frame(
label = c(
"Spatial",
"Point Patterns", "Spatial Connections", "Autocorrelation tests", "Variogram Modeling", "Interpolation",
"Ripley's K",
"Spatially Defined Connections",
"Global Moran's I/Geary's C", "LISA", "Getis-Ord Gi*",
"Plot Spatial Covariance", "Plot Spatial Semi-Variogram", "Fit Semi-Variogram",
"Kriging", "TPS", "IDW"
),
parent = c(
0,
1, 1, 1, 1, 1,
2,
3,
4, 4, 4,
5, 5, 5,
6, 6, 6
)
)
addMenu(spatMenu, spatFun, topMenu)
#Bayesian Menu
bayesFun <- c(NA, NA, function() configurableCmd("Bayes_onesam_t", 2), function() configurableCmd("Bayes_2t", 3), function() configurableCmd("Bayes_binom", 0))
bayesMenu <- data.frame(
label = c("Bayesian", "Bayesian Tests", "Bayesian 1 sample t-test", "Bayesian 2 sample t-test","Bayesian binomial test"),
parent = c(0, 1, 2, 2, 2)
)
addMenu(bayesMenu, bayesFun, topMenu)
#Morphometrics Menu
morphosFun <- c(
NA,
function() configurableCmd("readland", 0), NA, function() configurableCmd("gpagen", 0), NA,
function() digitize2D(), function() fun_na(),
function() fun_na(), function() fun_na(), function() fun_na(), function() fun_na()
)
morphoMenu <- data.frame(
label = c(
"GMM",
"Import Data", "Digitize", "GPA", "Plot",
"2D-Digitize", "3D-Digitize",
"Tangent Space", "Deformation", "Reference-Target Deformation", "Analyses"
),
parent = c(
0,
1, 1, 1, 1,
3, 3,
5, 5, 5, 5
)
)
addMenu(morphoMenu, morphosFun, topMenu)
#Help Menu
#print("Survival data from Marj Rabba, using Payne's (1973) age classes")})
helpFun <- c(
NA,
NA,
NA, NA, NA, NA,
function() data("syraPoly", envir = environment()), function() data("spatPOLY", envir = environment()), function() data("randPTS", envir = environment()), function() data("clusterPTS", envir = environment()),
function() data("LRBdata", envir = environment()), function() data("LRBkey", envir = environment()), function() data("myData", envir = environment()),
function() data("ClarksonLimbLoc", envir = environment()),
function() data("speth83", envir = environment()), function() data("speth83labels", envir = environment()), function() data("marjRab", envir = environment()),
function() data("marjRlabels", envir = environment()), function() data("marjRab.fuse", envir = environment()), function() data("winslow.fuse", envir = environment())
)
helpMenu <- data.frame(
label = c(
"Help",
"Example Data",
"Spatial", "Multivariate", "Chi Squared", "Survivorship",
"Syracuse Polygon", "Spatial Polygon", "Random Spatial Points", "Clustered Spatial Points",
"Binford's Data", "Binford's Variable Key", "Site-x-Species",
"Clarkson Deer Data",
"Garnsey Survival", "Garnsey Labels", "Marj Rabba Survival", "Marj Rabba Labels", "Marj Rabba Fusion", "Winslow Fusion"
),
parent = c(
0,
1,
2, 2, 2, 2,
3, 3, 3, 3,
4, 4, 4,
5,
6, 6, 6, 6, 6, 6
)
)
addMenu(helpMenu, helpFun, topMenu)
}
createMenu()
createMenu(morphoMenu)
createMenu(morphosFun)
tt <- tktoplevel(background='white')
txt <- tktext(tt, height=0,width=107,background='white') #adjust window size
tkimage.create ( "photo" , "image1" , file = system.file("img","zooarchLOGOsmall.gif",package="zooaRchGUI") )
label <- ttklabel (tt, image = "image1", compound = "image",padding = c(0, 0, 0, 0),background='white')
tkpack(label,padx=50)
tkpack(txt)#adjust window size
tktitle(tt) <- "zooaRch GUI 1.0.2"
createMenu(tt)
tkfocus(tt)
e <- new.env()
class(e) <- name
createConfigureFrame(e, comboNum, dir)
array.fun<-function()c(unlist(lapply(c(ls(envir = .GlobalEnv),ls("package:zooaRchGUI")), function(array) if(class(get(array))[1] == "array")c(unlist(array)))), "Load User File")
matrix.fun<-function()c(unlist(lapply(c(ls(envir = .GlobalEnv),ls("package:zooaRchGUI")), function(matrix) if(class(get(matrix))[1] == "matrix")c(unlist(matrix)))), "None","Load User File")
e$dataName<-tclVar("Choose Data")
e$dataName2<-tclVar("Choose Data")
e$dataName3<-tclVar("Choose Data")
e$array<-tclVar("NULL")
e$curve<-tclVar("NULL")
e$surface<-tclVar("NULL")
e$type<-tclVar("ProcD")
e$progress<-tclVar(1)
tkwm.title(e$wnd, "gpagen_fun")
tkconfigure(e$layout, text = "gpagen")
columnConfig(e$layout)
put_label(e$layout, "Input Data:",0,0,sticky="w")
data_combo <- ttkcombobox(e$layout, state = "readonly",
values = array.fun(),
textvariable = e$dataName)
tkgrid(data_combo, row = 0, column = 1, sticky="w", padx = 2)
tkbind(data_combo, "<<ComboboxSelected>>", function() updateDataFrame(e, e$dataName, "array"))
tkfocus(data_combo)
put_label(e$layout, "Input Curve:",2,0,sticky="w")
data_combo <- ttkcombobox(e$layout, state = "readonly",
values = matrix.fun(),
textvariable = e$dataName2)
tkgrid(data_combo, row = 2, column = 1, sticky="w", padx = 2)
tkbind(data_combo, "<<ComboboxSelected>>", function() updateDataFrame(e, e$dataName2, "curve"))
tkfocus(data_combo)
put_label(e$layout, "Input Surface:",3,0,sticky="w")
data_combo <- ttkcombobox(e$layout, state = "readonly",
values = matrix.fun(),
textvariable = e$dataName3)
tkgrid(data_combo, row = 3, column = 1, sticky="w", padx = 2)
tkbind(data_combo, "<<ComboboxSelected>>", function() updateDataFrame(e, e$dataName3, "surface"))
tkfocus(data_combo)
put_label(e$layout, "Type:", 4,0, sticky="w")
rb_frame<-ttkframe(e$layout)
sapply(c("ProcD", "Bending Energy"), function(i) {
radio_button<-tk2radiobutton(rb_frame, variable = e$type, text = i, value = i)
tkpack(radio_button, side = "left")
})
tkgrid(rb_frame, row = 4, column = 1, sticky = "w")
put_label ( e$layout , "Plot Progress:" , 5 , 0, sticky = "w")
progress_check <-ttkcheckbutton (e$layout , variable = e$progress)
tkgrid (progress_check , row = 5 , column = 1 , sticky = "w" ,padx = 2)
e
tclvalue(e$type)
e$curve
e$curve
tclvalue(e$dataname2)
e$dataname2
e$surface
createConfigureFrame
createConfigureFrame()
e$dataName <- tclVar("Choose one");
e$dataFrame <- tclVar("NULL");
columnConfig(e$layout)
e <- new.env()
class(e) <- name
createConfigureFrame(e, comboNum, dir)
array.fun<-function()c(unlist(lapply(c(ls(envir = .GlobalEnv),ls("package:zooaRchGUI")), function(array) if(class(get(array))[1] == "array")c(unlist(array)))), "Load User File")
matrix.fun<-function()c(unlist(lapply(c(ls(envir = .GlobalEnv),ls("package:zooaRchGUI")), function(matrix) if(class(get(matrix))[1] == "matrix")c(unlist(matrix)))), "None","Load User File")
e$dataName<-tclVar("Choose Data")
e$dataName2<-tclVar("Choose Data")
e$dataName3<-tclVar("Choose Data")
e$array<-tclVar("NULL")
e$curve<-tclVar("NULL")
e$surface<-tclVar("NULL")
e$type<-tclVar("ProcD")
e$progress<-tclVar(1)
tkwm.title(e$wnd, "gpagen_fun")
tkconfigure(e$layout, text = "gpagen")
columnConfig(e$layout)
put_label(e$layout, "Input Data:",0,0,sticky="w")
data_combo <- ttkcombobox(e$layout, state = "readonly",
values = array.fun(),
textvariable = e$dataName)
tkgrid(data_combo, row = 0, column = 1, sticky="w", padx = 2)
tkbind(data_combo, "<<ComboboxSelected>>", function() updateDataFrame(e, e$dataName, "array"))
tkfocus(data_combo)
put_label(e$layout, "Input Curve:",2,0,sticky="w")
data_combo <- ttkcombobox(e$layout, state = "readonly",
values = matrix.fun(),
textvariable = e$dataName2)
tkgrid(data_combo, row = 2, column = 1, sticky="w", padx = 2)
tkbind(data_combo, "<<ComboboxSelected>>", function() updateDataFrame(e, e$dataName2, "curve"))
tkfocus(data_combo)
dataname <- tclvalue(e$dataname2)
if (dataname == "Load User File"){
dataframe <- getData()
assign("curve", dataframe, envir = e)
}
else if (dataname == "None"){
dataframe <- NULL
assign("curve", dataframe, envir = e)
}
else{
dataframe <- get(dataname, .GlobalEnv)
assign("curve", dataframe, envir = e)
}
put_label(e$layout, "Input Surface:",3,0,sticky="w")
data_combo <- ttkcombobox(e$layout, state = "readonly",
values = matrix.fun(),
textvariable = e$dataName3)
tkgrid(data_combo, row = 3, column = 1, sticky="w", padx = 2)
tkbind(data_combo, "<<ComboboxSelected>>", function() updateDataFrame(e, e$dataName3, "surface"))
tkfocus(data_combo)
dataname <- tclvalue(e$dataname3)
if (dataname == "Load User File"){
dataframe <- getData()
assign("surface", dataframe, envir = e)
}
else if (dataname == "None"){
dataframe <- NULL
assign("surface", dataframe, envir = e)
}
else{
dataframe <- get(dataname, .GlobalEnv)
assign("surface", dataframe, envir = e)
}
put_label(e$layout, "Type:", 4,0, sticky="w")
rb_frame<-ttkframe(e$layout)
sapply(c("ProcD", "Bending Energy"), function(i) {
radio_button<-tk2radiobutton(rb_frame, variable = e$type, text = i, value = i)
tkpack(radio_button, side = "left")
})
tkgrid(rb_frame, row = 4, column = 1, sticky = "w")
put_label ( e$layout , "Plot Progress:" , 5 , 0, sticky = "w")
progress_check <-ttkcheckbutton (e$layout , variable = e$progress)
tkgrid (progress_check , row = 5 , column = 1 , sticky = "w" ,padx = 2)
e$curve
e$surface
e$array
library(zooaRchGUI)
zooaRch_GUI()
library(zooaRchGUI)
zooaRch_GUI()
library(zooaRchGUI)
zooaRch_GUI()
a<-installed.packages()
pack<-list.files("C:\\Users\\eotarola\\Documents\\R\\R-3.3.1\\library\\")
pack
pack<-list.files("C:\\Users\\eotarola\\Documents\\R\\R-3.4.0\\library\\")
pack
pack<-installed.packages()
pack
rownames(pack)
pack<-
rownames(installed.packages())
pack<-
rownames(installed.packages())
pack
pack<-rownames(installed.packages())
file.choose()
write.csv(pack,"C:\\Users\\eotarola\\Desktop\\installpack.csv")
read.csv("C:\\Users\\eotarola\\Desktop\\installpack.csv")
write.csv(pack,"C:\\Users\\eotarola\\Desktop\\installpack.csv",row.names = FALSE)
read.csv("C:\\Users\\eotarola\\Desktop\\installpack.csv")
library(zooaRchGUI)
install.packages("rmarkdown")
file.choose()
devtools::check(pkg = "E:\\Dropbox (LCA)\\Documents\\Research\\zoaRch_project\\zooaRchGUI_v1\\zooarchGUI",document=T,cleanup=FALSE, cran=T)
library("devtools")
library("roxygen2")
install.packages(c("roxygen2", "devtools"))
library("devtools")
library("roxygen2")
devtools::check(pkg = "E:\\Dropbox (LCA)\\Documents\\Research\\zoaRch_project\\zooaRchGUI_v1\\zooarchGUI",document=T,cleanup=FALSE, cran=T)
?check
devtools::check(pkg = "E:\\Dropbox (LCA)\\Documents\\Research\\zoaRch_project\\zooaRchGUI_v1\\zooarchGUI",
check_dir="E:\\Dropbox (LCA)\\Documents\\Research\\zoaRch_project\\zooaRchGUI_v1",
document=T,cleanup=FALSE, cran=T)
file.choose()
file.choose()
dat<-read.csv("C:\\Users\\eotarola\\Desktop\\Components Query1.csv")
head(dat)
plot(dat$Longitude,dat$Latitude)
which(dat$Latitude==9999)
dat<-dat[-which(dat$Latitude==9999),]
plot(dat$Longitude,dat$Latitude)
which(dat$Longitude>=0)
dat<-dat[-which(dat$Longitude==0),]
dat$Longitude>0
dat$Longitude[dat$Longitude>0]
(-dat$Longitude[dat$Longitude>0])
dat$Longitude[dat$Longitude>0]<-(-dat$Longitude[dat$Longitude>0])
plot(dat$Longitude,dat$Latitude)
which(dat$Bison.bone.==T)
dat[which(dat$Bison.bone.==T),]
bisondat<-dat[which(dat$Bison.bone.==T),]
plot(bisondat$Latitude,bisondat$BisonNISP)
which(bisondat$BisonNISP>5000)
bisondat<-bisondat[-which(bisondat$BisonNISP>5000),]
plot(bisondat$Latitude,bisondat$BisonNISP)
bisondat<-dat[which(dat$Bison.bone.==T),]
bisondat<-bisondat[-which(bisondat$BisonNISP>10000),]
plot(bisondat$Latitude,bisondat$BisonNISP)
bisondat<-bisondat[-which(bisondat$BisonNISP>9991),]
bisondat<-dat[which(dat$Bison.bone.==T),]
bisondat<-bisondat[-which(bisondat$BisonNISP>9991),]
plot(bisondat$Latitude,bisondat$BisonNISP)
grep(pattern = "999",x = bisondat$BisonNISP)
bisondat<-dat[which(dat$Bison.bone.==T),]
bisondat[grep(pattern = "999",x = bisondat$BisonNISP),]
bisondat[grep(pattern = "999",x = bisondat$BisonNISP),]
grep(pattern = "999",x = bisondat$BisonNISP)
bisondat<-dat[which(dat$Bison.bone.==T),]
bisondat<-bisondat[-grep(pattern = "999",x = bisondat$BisonNISP),]
plot(bisondat$Latitude,bisondat$BisonNISP)
bisondat<-bisondat[-which(bisondat$BisonNISP>30000),]
plot(bisondat$Latitude,bisondat$BisonNISP)
bisondat$BisonNISP
library(zooaRchGUI)
zooaRch_GUI()
filist<-list.files("E:\\Dropbox (LCA)\\Documents\\Research\\zoaRch_project\\zooaRchGUI_v1\\",full.names=TRUE)
filist
filist[grep(".tar.gz",x=filist)]
lines<-readLines("E:\\Dropbox (LCA)\\Documents\\Research\\zoaRch_project\\zooaRchGUI_v1\\DESCRIPTION")
lines[4]<-paste("Version: 1.0.2.",format(Sys.time(), "%m.%d.%Y.%H.%M"),sep="")
lines[5]<-paste("Date: ",Sys.Date(),sep="")
writeLines(lines,"E:\\Dropbox (LCA)\\Documents\\Research\\zoaRch_project\\zooaRchGUI_v1\\DESCRIPTION")
#detach("package:zooaRchGUI")
#remove.packages("zooaRchGUI")
library("devtools")
library("roxygen2")
## Assemble Man files
rm(list=ls())
filist<-list.files("E:\\Dropbox (LCA)\\Documents\\Research\\zoaRch_project\\zooaRchGUI_v1\\",full.names=TRUE)
deltar<-filist[grep(".tar.gz",x=filist)]
file.remove(deltar)
lines<-readLines("E:\\Dropbox (LCA)\\Documents\\Research\\zoaRch_project\\zooaRchGUI_v1\\DESCRIPTION")
lines[4]<-paste("Version: 1.0.2.",format(Sys.time(), "%m.%d.%Y.%H.%M"),sep="")
lines[5]<-paste("Date: ",Sys.Date(),sep="")
writeLines(lines,"E:\\Dropbox (LCA)\\Documents\\Research\\zoaRch_project\\zooaRchGUI_v1\\DESCRIPTION")
file.copy(from="E:\\Dropbox (LCA)\\Documents\\Research\\zoaRch_project\\zooaRchGUI_v1\\DESCRIPTION"
, to = "E:\\Dropbox (LCA)\\Documents\\Research\\zoaRch_project\\zooaRchGUI_v1\\zooarchGUI\\DESCRIPTION"
, overwrite = TRUE)
install.packages(c("roxygen2", "devtools"))
#detach("package:zooaRchGUI")
#remove.packages("zooaRchGUI")
library("devtools")
library("roxygen2")
## Assemble Man files
rm(list=ls())
filist<-list.files("E:\\Dropbox (LCA)\\Documents\\Research\\zoaRch_project\\zooaRchGUI_v1\\",full.names=TRUE)
deltar<-filist[grep(".tar.gz",x=filist)]
file.remove(deltar)
lines<-readLines("E:\\Dropbox (LCA)\\Documents\\Research\\zoaRch_project\\zooaRchGUI_v1\\DESCRIPTION")
lines[4]<-paste("Version: 1.0.2.",format(Sys.time(), "%m.%d.%Y.%H.%M"),sep="")
lines[5]<-paste("Date: ",Sys.Date(),sep="")
writeLines(lines,"E:\\Dropbox (LCA)\\Documents\\Research\\zoaRch_project\\zooaRchGUI_v1\\DESCRIPTION")
file.copy(from="E:\\Dropbox (LCA)\\Documents\\Research\\zoaRch_project\\zooaRchGUI_v1\\DESCRIPTION"
, to = "E:\\Dropbox (LCA)\\Documents\\Research\\zoaRch_project\\zooaRchGUI_v1\\zooarchGUI\\DESCRIPTION"
, overwrite = TRUE)
#devtools::check(pkg = "E:\\Dropbox (LCA)\\Documents\\Research\\zoaRch_project\\zooaRchGUI_v1\\zooarchGUI",
#                check_dir="E:\\Dropbox (LCA)\\Documents\\Research\\zoaRch_project\\zooaRchGUI_v1",
#                document=T,cleanup=FALSE, cran=T)
library(zooaRchGUI)
