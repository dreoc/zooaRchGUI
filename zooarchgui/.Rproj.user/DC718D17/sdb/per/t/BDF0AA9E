{
    "collab_server" : "",
    "contents" : "# Readland Function\nlayout.readland<-function(e){\n    #Data Model: enviroment called e\n    e$datatype<-tclVar(\".nts\")\n\n    tkwm.title(e$wnd, \"readland_fun\")\n    tkconfigure(e$layout, text = \"Read Landmark\")\n\n    columnConfig(e$layout)\n    #Data Type Radiobuttons\n    put_label(e$layout, \"Type:\", 1,0, sticky=\"w\")\n    rb_frame<-ttkframe(e$layout)\n    sapply(c(\".nts\", \".tps\", \"multi.nts\"), function(i) {\n               radio_button<-tk2radiobutton(rb_frame, variable = e$datatype, text = i, value = i)\n               tkpack(radio_button, side = \"left\")\n               })\n    tkgrid(rb_frame, row = 1, column = 1, sticky = \"w\")\n}\n\n#Ok Function\nrun.readland<-function(e) {\n    switch(tclvalue(e$datatype),\n           .nts = {name <- tclvalue(tkgetOpenFile(\n                                                  filetypes = \"{{NTS Files} {.nts}}\"))\n           if (name == \"\") return(data.frame());\n           data <- as.array(readland.nts(name))\n           file.name <- sub(x = basename(name), pattern = \".nts\",replacement = \"\",ignore.case = TRUE)\n           pos<-1\n           envir <- as.environment(pos)\n           assign(file.name, data, envir = envir)},\n           .tps = {name <- tclvalue(tkgetOpenFile(\n                                                  filetypes = \"{{TPS Files} {.tps}}\"))\n           if (name == \"\") return(data.frame());\n           data <- as.array(readland.tps(name))\n           file.name <- sub(x = basename(name), pattern = \".tps\",replacement = \"\",ignore.case = TRUE)\n           pos<-1\n           envir <- as.environment(pos)\n           assign(file.name, data, envir = envir)},\n           multi.nts = {name <- (choose.files(multi = TRUE, filters = as.matrix(c(\"NTS Files (*.nts)\", \"*.nts\"))))\n           if (name == \"\") return(data.frame());\n           data <- as.array(readmulti.nts(name))\n           pos<-1\n           envir <- as.environment(pos)\n           assign(x = \"collective.array\", value = data, envir = envir)}\n           )\n    tkdestroy(e$wnd)\n}\n\n# Gpagen Function\nlayout.gpagen<-function(e){\n    array.fun<-function()c(unlist(lapply(c(ls(envir = .GlobalEnv),ls(\"package:zooaRchGUI\")), function(array) if(class(get(array))[1] == \"array\")c(unlist(array)))), \"Load User File\")\n    matrix.fun<-function()c(unlist(lapply(c(ls(envir = .GlobalEnv),ls(\"package:zooaRchGUI\")), function(matrix) if(class(get(matrix))[1] == \"matrix\")c(unlist(matrix)))), \"None\",\"Load User File\")\n\n    #Data Model: enviroment called e\n    e$dataName<-tclVar(\"Choose Data\")\n    e$dataName2<-tclVar(\"Choose Data\")\n    e$dataName3<-tclVar(\"Choose Data\")\n    e$array<-tclVar(\"NULL\")\n    e$curve<-tclVar(\"NULL\")\n    e$surface<-tclVar(\"NULL\")\n    e$type<-tclVar(\"ProcD\")\n    e$progress<-tclVar(1)\n\n    tkwm.title(e$wnd, \"gpagen_fun\")\n    tkconfigure(e$layout, text = \"gpagen\")\n\n    columnConfig(e$layout)\n    #Data Combobox\n    put_label(e$layout, \"Input Data:\",0,0,sticky=\"w\")\n    data_combo <- ttkcombobox(e$layout, state = \"readonly\",\n                              values = array.fun(),\n                              textvariable = e$dataName)\n    tkgrid(data_combo, row = 0, column = 1, sticky=\"w\", padx = 2)\n    tkbind(data_combo, \"<<ComboboxSelected>>\", function() updateDataFrame(e, e$dataName, \"array\"))\n    tkfocus(data_combo)\n\n    #Curve Combobox\n    put_label(e$layout, \"Input Curve:\",2,0,sticky=\"w\")\n    data_combo <- ttkcombobox(e$layout, state = \"readonly\",\n                              values = c(matrix.fun(),dfs.fun()),\n                              textvariable = e$dataName2)\n    tkgrid(data_combo, row = 2, column = 1, sticky=\"w\", padx = 2)\n    if(tclvalue(e$dataName2) == \"Choose Data\" | tclvalue(e$dataName2) == \"None\" ){\n      e$curve<-NULL\n    }\n\n    tkbind(data_combo, \"<<ComboboxSelected>>\", function() updateDataFrame(e, e$dataName2, \"curve\"))\n    tkfocus(data_combo)\n\n    #Surface Combobox\n    put_label(e$layout, \"Input Surface:\",3,0,sticky=\"w\")\n    data_combo <- ttkcombobox(e$layout, state = \"readonly\",\n                              values = c(matrix.fun(),dfs.fun()),\n                              textvariable = e$dataName3)\n    tkgrid(data_combo, row = 3, column = 1, sticky=\"w\", padx = 2)\n    if(tclvalue(e$surface) == \"Choose Data\" | tclvalue(e$surface) == \"None\" ){\n      e$surface<-NULL\n    }\n    tkbind(data_combo, \"<<ComboboxSelected>>\", function() updateDataFrame(e, e$dataName3, \"surface\"))\n    tkfocus(data_combo)\n\n    #Bending or ProcD Radiobuttons\n    put_label(e$layout, \"Type:\", 4,0, sticky=\"w\")\n    rb_frame<-ttkframe(e$layout)\n    sapply(c(\"ProcD\", \"Bending Energy\"), function(i) {\n               radio_button<-tk2radiobutton(rb_frame, variable = e$type, text = i, value = i)\n               tkpack(radio_button, side = \"left\")\n                              })\n    tkgrid(rb_frame, row = 4, column = 1, sticky = \"w\")\n\n    #Plot Progress Checkbox\n    put_label ( e$layout , \"Plot Progress:\" , 5 , 0, sticky = \"w\")\n    progress_check <-ttkcheckbutton (e$layout , variable = e$progress)\n    tkgrid (progress_check , row = 5 , column = 1 , sticky = \"w\" ,padx = 2)\n}\n\n#Ok Function\nrun.gpagen<-function(e) {\n  #######################################################################\n  # 8.7.2017 - EOC added to fix errors reading surface and curve files - BEGIN\n\n  if (class(e$type)==\"tclVar\"){\n    if(tclvalue(e$type) == \"ProcD\"){\n      e$type<-TRUE\n    } else{\n      e$type<-FALSE\n    }\n  }\n\n  if (class(e$curve)==\"tclVar\"){\n    if(is.null(tclvalue(e$curve))){\n      e$curve<-NULL\n    }\n  }\n\n  if (class(e$curve)!=\"tclVar\"){\n    if(is.null(e$curve)){\n      e$curve<-NULL\n    }\n  }\n\n  if (class(e$surface)==\"tclVar\"){\n    if(is.null(tclvalue(e$surface))){\n      e$surface<-NULL\n    } else if(tclvalue(e$surface)==\"NULL\"){\n      e$surface<-NULL\n    }\n  }\n\n  if (class(e$surface)!=\"tclVar\"){\n    if(is.null(e$surface)){\n      e$surface<-NULL\n    }\n  }\n\n\n  if(is.matrix(e$curve)==FALSE & is.null(e$curve)==FALSE){\n    e$curve<-as.matrix(e$curve)\n  }\n\n  if(is.matrix(e$surface)==FALSE & is.null(e$surface)==FALSE){\n    e$surface<-as.matrix(e$surface)\n  }\n  ############################-END-###########################################\n    Y.gpa <- gpagen(e$array, curves = e$curve, surfaces = e$surface, ProcD = e$type, print.progress = as.numeric(tclvalue(e$progress)))\n    summary(Y.gpa)\n    plot(Y.gpa)\n    pos<-1\n    envir <- as.environment(pos)\n    assign(\"gparesults\", Y.gpa, envir = envir)\n    tkdestroy(e$wnd)\n}\n\ndigitize2D <-function() {\n    wnd <- tktoplevel(width=800, height=600)\n    tktitle(wnd) <- \"2D Digitizing\"\n\n\tdotMainMenu(wnd)\n  linkMainMenu(wnd)\n\tsliderMainMenu(wnd)\n\n\tmainFrame(wnd)\n\n\t#setwd(\"d:\\\\userdata\\\\slider_link\")\n\t#initialize data\n\tsliderInit()\n\tlinkInit()\n\tdigitizeInit()\n\tassign(\"activeDataList\", list(), envir = .GlobalEnv)\n\tassign(\"currImgId\", 1, envir = .GlobalEnv)\n\tassign(\"wnd\", wnd, envir = .GlobalEnv)\n\tassign(\"tab\", 0, envir = .GlobalEnv)\n}\n\n",
    "created" : 1502222641367.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "1|29|17|0|\n20|27|46|0|\n49|27|114|0|\n117|25|171|0|\n",
    "hash" : "1248589074",
    "id" : "BDF0AA9E",
    "lastKnownWriteTime" : 1502253089,
    "last_content_update" : 1502253089799,
    "path" : "E:/Dropbox (LCA)/Documents/Research/zoaRch_project/zooaRchGUI_v1/zooarchGUI/R/GMM.r",
    "project_path" : "R/GMM.r",
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}