{
    "collab_server" : "",
    "contents" : "scaleUnitVal <- tclVar(\"inches\")\napplyToAll <- tclVar(\"yes\")\n\nclearScaleDot <- function(e) {\n\te$scaleDot1 <- c(0, 0)\n\te$scaleDot2 <- c(0, 0)\n\te$scaleDotNum <- 0\n\te$scaleMode <- 0\n}\n\ndigitizeInit <- function(e) {\n\te$font <- 10\n\te$landmarkNum <- 5\n\te$zoom <- 0\n\te$digCurrImgId <- 1\n\te$digData <- list()\n\n\tclearScaleDot(e)\n}\n\ndotMainMenu <- function(e) {\n#print(\"dotMainMenu\")\n    topMenu <- tkmenu(e$wnd)\n    tkconfigure(e$wnd, menu = topMenu)\n\n    #File Menu\n    fileMenu <- tkmenu(topMenu, tearoff = FALSE)  # TOP menu\n    tkadd(fileMenu, \"command\", label = \"Create tps file\",command = function() openSpecimens(e))\n    tkadd(fileMenu, \"command\", label = \"Open tps file\", command = function() openTpsFile(e))\n    tkadd(fileMenu, \"command\", label = \"Save\", command = function() savetoTpsFile(e))\n    tkadd(fileMenu, \"command\", label = \"Exit\", command = function() tkdestroy(e$wnd))\n    tkadd(topMenu, \"cascade\", label = \"File\", menu = fileMenu)\n\n\te$dotMenuTree <- topMenu\n}\n\n#draw canvas and other widgets\ndigCreateCtlFrame <- function(e, parent) {\n#print(\"digCreateCtlFrame\")\n\n\tdigCtlFrame <- ttkframe(parent)\n\n\tsetScaleBtn <- ttkbutton(digCtlFrame, text = \"Digitize scale\", command = function() setScale(e))\n\tsetLandmarkNumBtn <- ttkbutton(digCtlFrame, text = \"Set number of landmarks\", command = function() setLandmarkNum(e))\n\n    e$scaleLabel = tklabel(digCtlFrame, text='Scale Factor: not set')\n\n    e$imgPath <- ttklabel(digCtlFrame, text = \"Path:\")\n    zoomBtn1 <- ttkbutton(digCtlFrame, text = \"zoom +\", command = function() onZoom(e, \"in\"))\n    zoomBtn2 <- ttkbutton(digCtlFrame, text = \"zoom -\",command = function() onZoom(e, \"out\"))\n    fitBtn <- ttkbutton(digCtlFrame, text = \"Fit\",command = function() onFit(e))\n\n    e$labelLandmarkVar <-tclVar(\"1\")\n    labelLandmark <- ttkcheckbutton(digCtlFrame, text = \"Label Landmark\",variable=e$labelLandmarkVar, command= function()onLabelLandMark(e))\n\n    fontAdd <- ttkbutton(digCtlFrame, text = \"Label Size +\", command = function() onFontAdd(e))\n    fontDec <- ttkbutton(digCtlFrame, text = \"Label Size -\",command = function() onFontDec(e))\n\n\te$specimenNumLabel <- ttklabel(digCtlFrame, text = \"Number of Specimens: 0\")\n\te$landMarkNumLabel <- ttklabel(digCtlFrame, text = \"Number of Landmarks: 0\")\n\n    e$missLandmarkVar <-tclVar(\"0\")\n    e$missLandmarkCheBtn <- ttkcheckbutton(digCtlFrame, text = \"Missing Landmark\",variable=e$missLandmarkVar)\n\n    sapply(list(setScaleBtn, setLandmarkNumBtn, e$scaleLabel, e$imgPath, zoomBtn1, zoomBtn2, fitBtn, labelLandmark, fontAdd, fontDec, e$specimenNumLabel, e$landMarkNumLabel, e$missLandmarkCheBtn), tkpack)\n\treturn (digCtlFrame)\n}\n\nbindDigCanvasEvent <-function(e, canvas) {\n    tkbind(canvas, \"<Double-Button-1>\", function(x, y) {\n\tdotAdd(e, x, y)})\n    tkbind(canvas, \"<B1-Motion>\", function(x, y) {\n\tdotMove(e, x, y)})\n\ttkbind(canvas, \"<ButtonRelease-1>\", function(x, y) {\n\tdotRelease(e, x, y)})\n    tkitembind(canvas, \"point\", \"<1>\", function(x, y) {\n\tdotSelect(e, x, y)})\n    tkitembind(canvas, \"point\", \"<3>\", function(x, y) {\n\tdotRemove(e, x, y)})\n}\n\ndigUpdateSpecNumber <-function(e, num) {\n\t#print(\"digUpdateSpecNumber\")\n\ttkconfigure(e$specimenNumLabel, text = paste(\"Number of Specimens: \", num))\n}\n\ndigShowPicture <- function(e) {\n#print(\"digShowPicture\")\n\tonFit(e)\n\ttpsDataList <- e$activeDataList\n\timgId <- e$currImgId\n\timgFile <- tpsDataList[[imgId]][[1]]\n\n    #update image path\n    pathLabel <- e$imgPath\n    tkconfigure(pathLabel, text = paste(\"Path: \", imgFile))\n\n\t#update scale factor\n\tscaleFactor <- tpsDataList[[imgId]][[2]]\n\tif(scaleFactor) {\n\t\ttkconfigure(e$scaleLabel, text = paste(\"Scale Factor: \", format(scaleFactor, digits = 5)))\n\t} else {\n\t\ttkconfigure(e$scaleLabel, text = paste(\"Scale Factor: \", \"not set\"))\n\t}\n\n\t#update number of landmarks\n\tdotNum <- digGetDotNum(e)\n\ttkconfigure(e$landMarkNumLabel, text = paste(\"Number of Landmarks: \", dotNum))\n}\n\nonZoom <- function(e, type) {\n\t#calculate current zoom level\n\tif(type == \"in\") {\n\t\tcurrZoom = as.integer(e$zoom)+1\n\t}\n\telse if(type == \"out\") {\n\t\tcurrZoom = as.integer(e$zoom)-1\n\t}\n\n\t#build image according to zoom level\n\tzoomImg <- tclVar()\n    tcl('image', 'create', 'photo', zoomImg)\n\tif(currZoom > 0) {\n\t\ttcl(zoomImg, 'copy', e$fitImage, zoom=(1+currZoom)) #large\n\t}else if(currZoom < 0){\n\t\ttcl(zoomImg, 'copy', e$fitImage, subsample=(1+abs(currZoom)))\n\t} else {\n\t\tzoomImg <- e$fitImage\n\t}\n\n\tcanvas <- e$activeCanvas\n\ttpsDataList <- e$activeDataList\n\timgId <- e$currImgId\n\ttkdelete(canvas, \"all\")\n\tcanvasH <- tpsDataList[[imgId]][[7]][2]\n\tcanvasW <- tpsDataList[[imgId]][[7]][1]\n\n\ttkconfigure(canvas, width=canvasW, height=canvasH)\n\ttkcreate(canvas, \"image\", as.integer(canvasW)/2, as.integer(canvasH)/2, image=zoomImg)\n\n\t#show dots and lable when size is back to normal\n\tif(currZoom == 0) {\n\t\tshowDots(e)\n\t\tonLabelLandMark(e)\n\t}\n\n\te$zoom <- currZoom\n}\n\nonFontAdd <- function(e) {\n    e$font <- e$font + 1\n    tkdelete(e$activeCanvas, \"label\")\n    onLabelLandMark(e)\n}\n\nonFontDec <- function(e) {\n\te$font <- e$font - 1\n    tkdelete(e$activeCanvas, \"label\")\n    onLabelLandMark(e)\n}\n\nonFit <- function(e) {\n\t#print(\"enter onFit\")\n\n\tid <- e$currImgId\n\tcanvas <- e$activeCanvas\n\n\t#show image\n\ttpsDataList <- e$activeDataList\n\timgFile <- tpsDataList[[id]][[1]]\n\tzoomImg <- tclVar()\n\ttcl('image', 'create', 'photo', zoomImg)\n    img <- tclVar()\n    tcl('image', 'create', 'photo', img, file=imgFile)\n\n\t#get ratio\n\tratio <- tpsDataList[[id]][[6]]\n\tcanvasH <- tpsDataList[[id]][[7]][2]\n\tcanvasW <- tpsDataList[[id]][[7]][1]\n\n\theight <- as.integer(tcl('image', 'height', img))\n\n\tratio <- as.integer(height/600)\n\tif(ratio < 1) {\n\t\ttcl(zoomImg, 'copy', img, zoom=as.integer(600/height))\n\t} else {\n\t\ttcl(zoomImg, 'copy', img, subsample=ratio)\n\t}\n\n\t#print(paste(\"id:\", id, \"height:\", height, \"width:\", \"NA\", \"ratio:\", ratio, \"canvasH:\", canvasH, \"canvasW:\", canvasW))\n\ttkconfigure(canvas, width=canvasW, height=canvasH)\n\ttkcreate(canvas, \"image\", as.integer(canvasW)/2, as.integer(canvasH)/2, image=zoomImg)\n\t#assign(\"digData\", tpsDataList, envir = .GlobalEnv)\n\n\t#reset zoom level\n\te$fitImage <- zoomImg\n\te$zoom <- 0\n\te$activeCanvas <- canvas\n\n\tshowDots(e)\n\tonLabelLandMark(e)\n}\n\nlabel<-function(e, id, x, y) {\n\t#print(\"label\")\n    canvas <- e$activeCanvas\n    l <- tkcreate(canvas, \"text\", x + 12, y, text=id, fill=\"red\", font=c(\"Helvetica\", e$font))\n    tkaddtag(canvas, \"label\", \"withtag\", l)\n}\n\nonLabelLandMark <- function(e) {\n#print(\"onLabelLandMark\")\n    tkdelete(e$activeCanvas, \"label\")\n\n    if (tclvalue(e$labelLandmarkVar) == \"1\") {\n        tpsDataList <- e$activeDataList\n\t\tif(length(tpsDataList) > 0) {\n\t\t\timgId <- e$currImgId\n\t\t\ttemp <- tpsDataList[[imgId]][[3]]\n\t\t\tstatusList <- tpsDataList[[imgId]][[5]]\n\n\t\t\tif(length(temp)) {\n\t\t\t\tid <- 1\n\t\t\t\tfor(i in 1:length(statusList)){\n\t\t\t\t\t#print(paste(\"i:\", i, \"status:\", statusList[[i]]))\n\t\t\t\t\tif(statusList[[i]] == \"removed\") {next}\n\t\t\t\t\tlabel(e, id, temp[[i]][1], temp[[i]][2])\n\t\t\t\t\tid <- id + 1\n\t\t\t\t}\n\t\t\t}\n\t\t}\n    }\n}\n\n#show next specimen\ndigOnNext <- function(e) {\n\t#check if it is the last picture\n\tif(e$scaleMode) {\n\t\talertBox(\"Please finish scale calculation\")\n\t} else if(e$currImgId < length(e$activeDataList)) {\n\t\t#check if the landmark is enough\n\t\tdotNum <- digGetDotNum(e)\n\t\tif(dotNum >= as.integer(e$landmarkNum)) {\n\t\t\te$currImgId <- e$currImgId+1\n\t\t\tdigShowPicture(e)\n\t\t} else {\n\t\t\talertBox(\"Incorrect number of landmarks\")\n\t\t}\n    } else {\n        alertBox(\"It's the last specimen\")\n    }\n}\n\n#show the previous specimen\ndigOnPrevious <- function(e) {\n\tif(e$scaleMode) {\n\t\talertBox(\"Please finish scale calculation\")\n\t} else if(e$currImgId > 1) {\n\t\t#check if the landmark is enough\n\t\tdotNum <- digGetDotNum(e)\n\t\tif(dotNum >= as.integer(e$landmarkNum)) {\n\t\t\te$currImgId <- e$currImgId-1\n\t\t\tdigShowPicture(e)\n\t\t} else {\n\t\t\talertBox(\"Incorrect number of landmarks\")\n\t\t}\n\n    } else {\n        alertBox(\"It's the first specimen\")\n    }\n}\n\ngetPicScale <- function(e, scale) {\n\t#get ratio\n\tid <- e$currImgId\n\tdot1 <- e$scaleDot1\n\tdot2 <- e$scaleDot2\n    tpsDataList <- e$activeDataList\n\tratio <- tpsDataList[[id]][[6]]\n\tfitImgH <- as.integer(tpsDataList[[id]][[7]])\n\n\tx1 <- as.double(dot1[1]*ratio)\n\ty1 <- as.double(fitImgH-dot1[2])*ratio\n\tx2 <- as.double(dot2[1]*ratio)\n\ty2 <- as.double(fitImgH-dot2[2])*ratio\n\n    scale <- as.numeric(scale)\n\n\treturn (scale/sqrt(sum((x2-x1)^2+(y2-y1)^2)))\n}\n\nonSetScaleOk <- function(e) {\n\tif(e$scaleDotNum < 2) {\n\t\talertBox(\"Incorrect number of scale dots\")\n\t\treturn (0)\n\t}\n\n\t#get distance\n    distance <- tclvalue(tkget(e$distanceEntry))\n\n\t#calculate scale factor\n\tscaleFactor <- getPicScale(e, distance)\n\t#print(paste(\"scale factor:\",scaleFactor))\n\n\t#show scale factor\n\ttkconfigure(e$scaleLabel, text = paste(\"Scale Factor: \", format(scaleFactor, digits = 5)))\n\n\t#update tpsDataList\n\ttpsDataList <- e$activeDataList\n\tcurrImgId <- e$currImgId\n\tif(tclvalue(applyToAll) == \"yes\") {\n\t\t#print(paste(\"apply to all\", tclvalue(applyToAll)))\n\t\t#print(paste(\"scaleUnitVal\", tclvalue(scaleUnitVal)))\n\t\tfor(i in 1:length(tpsDataList)) {\n\t\t\ttpsDataList[[i]][[2]] <- scaleFactor\n\t\t\ttpsDataList[[i]][[4]] <- tclvalue(scaleUnitVal)\n\t\t}\n\t} else {\n\t\ttpsDataList[[currImgId]][[2]] <- scaleFactor\n\t\ttpsDataList[[currImgId]][[4]] <- tclvalue(scaleUnitVal)\n\t}\n\n\t#clear variables\n\tclearScaleDot(e)\n\te$activeDataList <- tpsDataList\n\n\ttkdestroy(e$setScaleWin)\n}\n\nonlandmarkNumOk <- function(e) {\n\t#get user input value\n    e$landmarkNum <- tclvalue(tkget(e$landmarkEntry))\n\n\t# turn to the first picture\n\ttpsDataList <- e$activeDataList\n\te$currImgId <- 1\n\tdigShowPicture(e)\n\n\ttkdestroy(e$landmarkNumWin)\n}\n\ncreateSetScaleWind <- function(e) {\n\twin <- tktoplevel()\n\ttkwm.title(win, \"Set Scale\")\n\n\tlabel_frame <- ttkframe(win)\n\ttkpack(label_frame, expand = TRUE, fill = \"both\", padx = 5, pady = 5)\n\ttkgrid.columnconfigure(label_frame, 0, weight = 1)\n\ttkgrid.columnconfigure(label_frame, 1, weight = 1)\n\ttkgrid.columnconfigure(label_frame, 2, weight = 1)\n\ttkgrid.columnconfigure(label_frame, 1, weight = 1)\n\n\tdistancelabel = tklabel(label_frame, text='distance: ')\n\te$distanceEntry = tkentry(label_frame, textvariable=tclVar(\"10\"))\n\ttkgrid(distancelabel, row = 0, column = 0, sticky = \"e\")\n\ttkgrid(e$distanceEntry, row = 0, column = 1, sticky = \"e\")\n\n\tunitlabel = tklabel(label_frame, text='unit: ')\n\tunitCombox <- ttkcombobox(label_frame, state = \"readonly\", values = c('inches', 'millimeters', 'centimeters'), textvariable = scaleUnitVal)\n\ttkgrid(unitlabel, row = 1, column = 0, sticky = \"e\")\n\ttkgrid(unitCombox, row = 1, column = 1, sticky = \"e\")\n\te$unitCombox <- unitCombox\n\n\tapplyLabel = tklabel(label_frame, text='apply to all specimens')\n\tapplyCombox <- ttkcombobox(label_frame, state = \"readonly\", values = c('yes', 'no'), textvariable = applyToAll)\n\ttkgrid(applyLabel, row = 2, column = 0, sticky = \"e\")\n\ttkgrid(applyCombox, row = 2, column = 1, sticky = \"e\")\n\te$applyCombox <- applyCombox\n\n\tnoteLable <- tklabel(win, text='Note: Please place two dots for scale setting')\n\ttkpack(noteLable, expand = TRUE, fill = \"both\", padx = 5, pady = 5)\n\n\tbtnFrame <- ttkframe(win)\n\ttkpack(btnFrame, fill = \"x\", padx = 5, pady = 5)\n\tcancelBtn <- ttkbutton(btnFrame, text = \"cancel\", command = function() tkdestroy(win))\n\tokBtn <- ttkbutton(btnFrame, text = \"ok\",command = function() onSetScaleOk(e))\n\n\ttkpack(ttklabel(btnFrame, text = \" \"), expand = TRUE, fill = \"y\", side = \"left\")\n\tsapply(list(cancelBtn, okBtn), tkpack, side = \"left\", padx = 6)\n\n\te$setScaleWin <- win\n\ttkfocus(win)\n}\n\nsetScale <- function(e) {\n\tcanvas <- e$activeCanvas\n\ttkdelete(canvas, \"scale\")\n\ttpsDataList <- e$activeDataList\n\n\tif(length(tpsDataList) == 0) {\n\t\talertBox(\"no picture open\")\n\t} else {\n\t\te$scaleMode <- 1\n\t\tcreateSetScaleWind(e)\n\t}\n}\n\nsetLandmarkNum <- function(e) {\n\twin <- tktoplevel()\n\ttkwm.title(win, \"Set Landmark Number\")\n\n\tentryFrame <- ttkframe(win)\n\ttkpack(entryFrame, expand = TRUE, fill = \"both\", padx = 5, pady = 5)\n\tlabel = tklabel(entryFrame, text='Set landmark Number: ')\n\n    e$landmarkEntry = tkentry(entryFrame, textvariable=tclVar(e$landmarkNum))\n\tsapply(list(label, e$landmarkEntry), tkpack, side = \"left\", padx = 6)\n\n\tbtnFrame <- ttkframe(win)\n\ttkpack(btnFrame, fill = \"x\", padx = 5, pady = 5)\n\tcancelBtn <- ttkbutton(btnFrame, text = \"cancel\", command = function() tkdestroy(win))\n\tokBtn <- ttkbutton(btnFrame, text = \"ok\",command = function() onlandmarkNumOk(e))\n\n\ttkpack(ttklabel(btnFrame, text = \" \"), expand = TRUE, fill = \"y\", side = \"left\")\n\tsapply(list(cancelBtn, okBtn), tkpack, side = \"left\", padx = 6)\n\n\te$landmarkNumWin <- win\n\ttkfocus(win)\n}\n\nsavetoTpsFile <- function(e) {\n    currImgId <- e$currImgId\n    tpsDataList <- e$activeDataList\n\n\t#check if the landmark is enough\n\tdotNum <- digGetDotNum(e)\n\tlandmarkNum <- as.integer(e$landmarkNum)\n\tif(dotNum < landmarkNum) {\n\t\talertBox(\"Incorrect number of landmarks\")\n\t\treturn ()\n\t}\n\n\t#select the location\n\tfilename <- tclvalue(tkgetSaveFile(filetypes=\"{TPS {.tps}}\"))\n\tif (!nchar(filename)) {\n\t\treturn ()\n\t}\n\n    newdata <- array(0, c(landmarkNum, 2, length(tpsDataList)))\n    filelist <- list()\n    scalebar <- list()\n\n    for(i in 1:length(tpsDataList)){\n        # get image file list\n        filelist[[length(filelist)+1]] <- tpsDataList[[i]][[1]]\n\n        #get scale list\n        scalebar[[length(scalebar)+1]] <- tpsDataList[[i]][[2]]\n\n\t\t#get ratio\n\t\tratio <- tpsDataList[[i]][[6]]\n\t\tfitImgH <- as.integer(tpsDataList[[i]][[7]][2])\n\t\t#print(paste(\"i:\", i, \" ratio: \", ratio, \" fitImgH: \", fitImgH))\n\n        #construct landmark matrix\n\t\tcoordi <- tpsDataList[[i]][[3]]\n\t\tstatusList <- tpsDataList[[i]][[5]]\n\t\t#print(paste(\"landmarknum:\", landmarkNum))\n        selected <- matrix(NA, nrow = landmarkNum, ncol = 2)\n        id <- 1\n\t\tj <- 1\n        while(id <= landmarkNum){\n            if(statusList[[j]] != \"removed\") {\n\n\t\t\t\tif(statusList[[j]] == \"black\") {\n\t\t\t\t\tselected[id, 1] <- NA\n\t\t\t\t\tselected[id, 2] <- NA\n\t\t\t\t} else {\n\t\t\t\t\tselected[id, 1] <- as.double(coordi[[j]][1]*ratio)\n\t\t\t\t\tselected[id, 2] <- as.double(fitImgH-coordi[[j]][2])*ratio\n\t\t\t\t}\n\t\t\t\tid <- id + 1\n\t\t\t}\n\n\t\t\tj <- j+1\n        }\n        #print(\"landmark: \")\n        #print(selected)\n        newdata[, , i] <- selected\n    }\n\n    dimnames(newdata)[[3]] <- as.list(filelist)\n\n    ##################################################################################\n    # 7.30.2017 - EOC change: added conditional structure to avoid double \".tps\" when\n    # saving file\n    if (length(grep(\".tps\",x = filename)) > 0 ) {\n      writeland.tps(newdata, filename, scalebar)\n    } else {\n      writeland.tps(newdata, paste(filename,\".tps\", sep = \"\"), scalebar)\n      }\n    ##################################################################################\n}\n\n# get image file\nopenSpecimens <- function(e) {\n  #print(\"openSpecimens\")\n  #############################################################\n  # 8.9.2017 EOC added \"title\" argument to tkgetOpenFile\n  # only GIF files are serched for until other files can be read\n  fileStr <- tclvalue(tkgetOpenFile( filetypes = \"{{GIF file} {.gif}}\",\n                                     multiple=TRUE, title=\"Select Images to Digitize\"))\n  ###########################################################\n\n  ################################################################\n  # 8.10.2017 EOC changed seems that when spaces are in file name, brackets {} are placed in output of tkgetOpenFile\n  # but when no spaces, strng is without brackets. I inserted conditional to detect whether {} are present and separate\n  # files differently when they are or not present.######\n  if (length(grep(pattern = \"}\",x = fileStr)) >0 ){\n    ################################################################\n    # 8.9.2017 EOC changed strsplit's pattern from \" \" to removing\n    # brackets {}, \" \" became a problem when filenames had spaces.\n    imgList <- unlist(strsplit(fileStr, \"} \",fixed = FALSE))\n    imgList <- gsub(pattern = \"}\",replacement = \"\",x = imgList)\n    imgList <- gsub(pattern = \"\\\\{\",replacement = \"\",x = imgList)\n    ################################################################\n  } else {\n    imgList <- unlist(strsplit(fileStr, \" \",fixed = FALSE))\n  }\n  ##################################################################\n\n    nSpecimens <- length(imgList)\n\n    if (nSpecimens != 0) {\n\t\t#initialize tpsDataList\n        tpsDataList <- list()\n        for(i in 1:length(imgList)){\n\t\t\tratioV <- getRatio(imgList[[i]])\n\t\t\tratio <- ratioV[1]\n\t\t\tcanvasW <- ratioV[2]\n\t\t\tcanvasH <- ratioV[3]\n\n\t\t\tif(ratio == 0) {\n\t\t\t\tnSpecimens <- nSpecimens-1\n\t\t\t\tnext\n\t\t\t}\n\n\t\t\ttpsDataList[[length(tpsDataList)+1]] <- list(imgList[[i]], 0, list(), \"inches\", list(), ratio, c(canvasW, canvasH))\n        }\n\n\t\tif(nSpecimens > 0) {\n\t\t\t#initialize\n\t\t\tdigitizeInit(e)\n\n\t\t\te$activeDataList <- tpsDataList\n\t\t\te$digData <- tpsDataList\n\t\t\te$currImgId <- 1\n\n\t\t\tdigShowPicture(e)\n\n\t\t\ttkconfigure(e$specimenNumLabel, text = paste(\"Number of Specimens: \", nSpecimens))\n\t\t}\n    }\n}\n\nupdateDotList <- function(e, x, y, operate, moveDotId = 0, status=\"normal\") {\n    tpsDataList <- e$activeDataList\n    currImgId <- e$currImgId\n    temp <- tpsDataList[[currImgId]][[3]]\n\tstatusList <- tpsDataList[[currImgId]][[5]]\n    dotId <- getDotId(e, x, y)\n\tif(dotId != 0) {\n\t\tnewAdded <- FALSE\n\t}else {\n\t\tnewAdded <- TRUE\n\t}\n\n    if (operate == \"add\") {\n        if(dotId == 0) {\n            temp[[length(temp)+1]] <- c(x, y)\n\t\t\tstatusList[[length(statusList)+1]] <- status\n            #newAdded <- digGetDotNum(statusList)\n        }\n    } else if (operate == \"move\") {\n        temp[[moveDotId]] <- c(x,y)\n    } else if(operate == \"remove\") {\n        #temp[dotId] <- NA\n\t\tstatusList[dotId] <- \"removed\"\n    }\n\n    tpsDataList[[currImgId]][[3]] <- temp\n\ttpsDataList[[currImgId]][[5]] <- statusList\n\n    e$activeDataList <- tpsDataList\n    return (newAdded)\n}\n\ndotAdd<-function(e, x, y) {\n\ttpsDataList <- e$activeDataList\n\tif(length(tpsDataList) <= 0) {\n\t\treturn ()\n\t}\n\n    x<-as.integer(x)\n    y<-as.integer(y)\n\n\tcanvas <- e$activeCanvas\n\tscaleDotNum <- e$scaleDotNum\n\n\tscaleMode <- e$scaleMode\n\tif(scaleMode) {\n\t\tscaleDotNum <- scaleDotNum+1\n\t\ttkdelete(canvas, \"scaleline\")\n        item <- tkcreate(canvas, \"oval\", x - 2, y - 2, x + 2, y + 2,\n                         width=1, outline=\"black\", fill=\"red\")\n\t\ttkaddtag(canvas, \"scale\", \"withtag\", item)\n\n\t\tif(scaleDotNum == 1) {\n\t\t\te$scaleDot1 <- c(x,y)\n\t\t\te$scaleDotNum <- scaleDotNum\n\t\t} else if(scaleDotNum == 2) {\n\t\t\te$scaleDot2 <- c(x,y)\n\t\t\te$scaleDotNum <- scaleDotNum\n\t\t\tscaleDot1 <- e$scaleDot1\n\t\t\titem <- tkcreate(canvas, \"line\", scaleDot1[1], scaleDot1[2], x, y, width=1, fill=\"red\")\n\t\t\ttkaddtag(canvas, \"scaleline\", \"withtag\", item)\n\t\t\te$scaleMode <- 0\n\t\t}\n\t} else {\n\t\tfill <- \"red\"\n\t\toutline <- \"black\"\n\t\tdotStatus <- \"normal\"\n\t\tif (tclvalue(e$missLandmarkVar) == \"1\") {\n\t\t\tfill <- \"black\"\n\t\t\toutline <- \"red\"\n\t\t\tdotStatus <- \"black\"\n\t\t\tupdateMissLandMark(e, 0)\n\t\t}\n\t\tres <- updateDotList(e, x, y, \"add\", status=dotStatus)\n\n\t\tif(res) {\n\t\t\titem <- tkcreate(canvas, \"oval\", x - 6, y - 6, x + 6, y + 6,\n\t\t\t\t\t\t\t width=1, outline=outline,\n\t\t\t\t\t\t\t fill=fill)\n\t\t\ttkaddtag(canvas, \"point\", \"withtag\", item)\n\n\t\t\t#add label for this dot\n\t\t\tdotNum <- digGetDotNum(e)\n\t\t\tif((tclvalue(e$labelLandmarkVar) == \"1\")) {\n\t\t\t\tlabel(e, dotNum, x, y)\n\t\t\t}\n\n\t\t\ttkconfigure(e$landMarkNumLabel, text = paste(\"Number of Landmarks: \", dotNum))\n\t\t}\n\t}\n}\n\nupdateMissLandMark <-function(e, value) {\n\te$missLandmarkVar <-tclVar(value)\n\ttkconfigure(e$missLandmarkCheBtn, variable=e$missLandmarkVar)\n}\n\ndotSelect<-function(e, x, y) {\n\tif(!e$scaleMode) {\n\t\tcanvas <- e$activeCanvas\n\t\tx <- as.numeric(x)\n\t\ty <- as.numeric(y)\n\t\ttkdtag(canvas, \"selected\")\n\t\ttkaddtag(canvas, \"selected\", \"withtag\", \"current\")\n\t\ttkitemraise(canvas,\"current\")\n\t\tdotId <- getDotId(e, x, y)\n\t\te$selectedDot <- dotId\n\t}\n}\n\ndotRelease <- function(e, x, y) {\n\tif(length(e$activeDataList) <= 0) {\n\t\treturn ()\n\t}\n\n\tif(!e$scaleMode) {\n\t\t#redraw the label\n\t\tcanvas <- e$activeCanvas\n\t\ttkdelete(canvas, \"label\")\n\t\tonLabelLandMark(e)\n\t\te$selectedDot <- 0\n\t}\n}\n\ndotMove <- function(e, x, y) {\n    ## This procedure is invoked during mouse motion events.\n    ## It drags the current item.\n    ##\n    ## Arguments:\n    ## x, y -    The coordinates of the mouse.\n\n\tif(length(e$activeDataList) <= 0) {\n\t\treturn ()\n\t}\n\n\tif(!e$scaleMode) {\n\t\tx <- as.numeric(x)\n\t\ty <- as.numeric(y)\n\t\ttpsDataList <- e$activeDataList\n\t\tcurrImgId <- e$currImgId\n\t\ttemp <- tpsDataList[[currImgId]][[3]]\n\t\tdotId <- e$selectedDot\n\t\tif(dotId) {\n\t\t\tcanvas <- e$activeCanvas\n\t\t\ttkmove(canvas, \"selected\", x - temp[[dotId]][1], y -  temp[[dotId]][2])\n\t\t\tupdateDotList(e, x, y, \"move\", dotId)\n\t\t}\n\t}\n}\n\ndigRemoveDotOk <-function(e, x, y) {\n\tupdateDotList(e, x, y, \"remove\")\n\tcanvas <- e$activeCanvas\n\ttkdelete(canvas, \"point\")\n\ttkdelete(canvas, \"label\")\n\n\tshowDots(e)\n\n\t#redraw the label\n\tonLabelLandMark(e)\n\n\t#update landmark number\n\tdotNum <- digGetDotNum(e)\n\ttkconfigure(e$landMarkNumLabel, text = paste(\"Number of Landmarks: \", dotNum))\n\n\twin <- e$removeWin\n\ttkdestroy(win)\n}\n\ndigGetDotNum <- function(e) {\n\t#check if the landmark is enough\n\timgId <- e$currImgId\n\ttpsDataList <- e$activeDataList\n\tstatusList <- tpsDataList[[imgId]][[5]]\n\n\tlen <- 0\n\tif(length(statusList)) {\n\t\tfor(i in 1:length(statusList)) {\n\t\t\tif(statusList[[i]] != \"removed\") {len = len+1}\n\t\t}\n\t}\n\treturn (len)\n}\n\ndotRemove <-function(e, x, y) {\n\tif(!e$scaleMode) {\n\t\tpopUpRemoveWindow(e, x, y, 'Do you want to delete this landmark?', \"digdot\")\n\t}\n}\n",
    "created" : 1502222165348.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1889031919",
    "id" : "37D97377",
    "lastKnownWriteTime" : 1502375679,
    "last_content_update" : 1502375679846,
    "path" : "E:/Dropbox (LCA)/Documents/Research/zoaRch_project/zooaRchGUI_v1/zooarchGUI/R/2dDigitize.digitize.r",
    "project_path" : "R/2dDigitize.digitize.r",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}