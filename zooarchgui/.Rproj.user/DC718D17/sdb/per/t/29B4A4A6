{
    "collab_server" : "",
    "contents" : "\nisDebug <- 0\n################# main data structure ##############################\n#tpsDataList\n#tpsDataList[imgId][[1]]: specimen image dir\n#tpsDataList[imgId][[2]]: scale factor\n#tpsDataList[imgId][[3]]: landmarks\n#tpsDataList[imgId][[4]]: sclae units\n#tpsDataList[imgId][[5]]: landmark status ('normal', 'black', 'removed')\n#tpsDataList[imgId][[6]]: ratio\n#tpsDataList[imgId][[7]]: fitImgH\n#tpsDataList[imgId][[8]]: link line coordinates list(c(dot1, dot2, line))\n#tpsDataList[1][[8]]: slider line coordinates list(c(dot1, dot2, dot3, line1, line2))\n#tpsDataList[1][[9]]: line status ('normal', 'removed')\n\nswitchTab <- function(W, x, y) {\n\tid <- tcl(W, \"identify\", \"tab\", x, y)\n\n\t#record activeDataList and current image id\n\tactiveDataList <- get(\"activeDataList\", envir = .GlobalEnv)\n\tcurrImgId <- get(\"currImgId\", envir = .GlobalEnv)\n\ttab <- get(\"tab\", envir = .GlobalEnv)\n\tif(tab == 0) {\n\t\tassign(\"digData\", activeDataList, envir = .GlobalEnv)\n\t\tassign(\"dotCurrImgId\", currImgId, envir = .GlobalEnv)\n\t}else if (tab == 1) {\n\t\tassign(\"linkData\", activeDataList, envir = .GlobalEnv)\n\t\tassign(\"linkCurrImgId\", currImgId, envir = .GlobalEnv)\n\t}else if (tab == 2) {\n\t\tassign(\"sliderData\", activeDataList, envir = .GlobalEnv)\n\t\tassign(\"sliderCurrImgId\", currImgId, envir = .GlobalEnv)\n\t}\n\n\t#update canvas and activeDataList\n\tif (tclvalue(id) == 0) {\n\t\tassign(\"tab\", 0, envir = .GlobalEnv)\n\t\tmenuTree <- get(\"dotMenuTree\", envir = .GlobalEnv)\n\t\tcanvas <- get(\"digCanvas\", envir = .GlobalEnv)\n\t\tdataList <- get(\"digData\", envir = .GlobalEnv)\n\t\tcurrImgId <- get(\"dotCurrImgId\", envir = .GlobalEnv)\n\t} else if (tclvalue(id) == 1) {\n\t\tassign(\"tab\", 1, envir = .GlobalEnv)\n\t\tcanvas <- get(\"linkCanvas\", envir = .GlobalEnv)\n\t\tdataList <- get(\"linkData\", envir = .GlobalEnv)\n\t\tcurrImgId <- get(\"linkCurrImgId\", envir = .GlobalEnv)\n\t\tmenuTree <- get(\"linkMenuTree\", envir = .GlobalEnv)\n\t}else if (tclvalue(id) == 2) {\n\t\tassign(\"tab\", 2, envir = .GlobalEnv)\n\t\tcanvas <- get(\"sliderCanvas\", envir = .GlobalEnv)\n\t\tdataList <- get(\"sliderData\", envir = .GlobalEnv)\n\t\tcurrImgId <- get(\"sliderCurrImgId\", envir = .GlobalEnv)\n\t\tmenuTree <- get(\"sliderMenuTree\", envir = .GlobalEnv)\n\t}\n\n\t#switch the Menu\n\twnd <- get(\"wnd\", envir = .GlobalEnv)\n\ttkconfigure(wnd, menu = menuTree)\n\n\tassign(\"activeCanvas\", canvas, envir = .GlobalEnv)\n\tassign(\"activeDataList\", dataList, envir = .GlobalEnv)\n\tassign(\"currImgId\", currImgId, envir = .GlobalEnv)\n}\n\nmainFrame <-function(wnd) {\n\ttn <- ttknotebook(wnd)\n\n\ttkbind(tn, '<Button-1>', switchTab)\n\ttkbind(wnd, \"<Key>\", sliderDotCancel)\n\n\tsliderFrame <- createFrame(tn, \"slider\")\n\tlinkFrame <- createFrame(tn, \"link\")\n\tdigitizeFrame <- createFrame(tn, \"digitize\")\n\n\ttkadd(tn,digitizeFrame,text=\"2dDigitize\")\n\ttkadd(tn,linkFrame,text=\"link\")\n\ttkadd(tn,sliderFrame,text=\"Slider\")\n\n\ttkpack(tn)\n}\n\ncreateFrame <- function(parent, id = \"\") {\n\n\tmyFrame <- ttkframe(parent)\n\tdisplayFrame <- ttkframe(myFrame)\n\timgFrame <- ttkframe(displayFrame)\n\tif(id == \"digitize\") {\n\t\tctlFrame <- digCreateCtlFrame(displayFrame)\n\t}else if (id == \"link\"){\n\t\tctlFrame <- createCtlFrame(displayFrame, \"link\")\n\t}else if(id == \"slider\") {\n\t\tctlFrame <- createCtlFrame(displayFrame, \"slider\")\n\t}\n\ttkpack(displayFrame)\n\tsapply(list(imgFrame, ctlFrame), tkpack, side = \"left\", padx = 6)\n\n\tcanvas <- tkcanvas(imgFrame, relief=\"raised\", width=800, height=600, background='white')\n\ttkpack(canvas, side=\"top\", fill=\"x\")\n\n\tbtnFrame <- createBtnFrame(myFrame)\n\ttkpack(btnFrame)\n\n\ttkpack(myFrame)\n\n\tif(id == \"digitize\") {\n\t\tbindDigCanvasEvent(canvas)\n\t\tassign(\"digCanvas\", canvas, envir = .GlobalEnv)\n\t\tassign(\"activeCanvas\", canvas, envir = .GlobalEnv)\n\t}else if(id == \"link\"){\n\t\tbindLinkCanvasEvent(canvas)\n\t\tassign(\"linkCanvas\", canvas, envir = .GlobalEnv)\n\t}else {\n\t\tbindSliderCanvasEvent(canvas)\n\t\tassign(\"sliderCanvas\", canvas, envir = .GlobalEnv)\n\t}\n\n\treturn (myFrame)\n}\n\ncreateBtnFrame <- function(parent) {\n\tbtnFrame <- ttkframe(parent)\n\tprevBtn <- ttkbutton(btnFrame, text = \"< Previous\", command = onPrevious)\n    nextBtn <- ttkbutton(btnFrame, text = \"Next >\",command = onNext)\n\n    tkpack(ttklabel(btnFrame, text = \" \"), expand = TRUE, fill = \"both\", side = \"left\")\n    sapply(list(prevBtn, nextBtn), tkpack, side = \"left\", padx = 6)\n\ttkpack(ttklabel(btnFrame, text = \" \"), expand = TRUE, fill = \"both\", side = \"left\")\n\n\treturn (btnFrame)\n}\n\ncreateCtlFrame <-function(parent, id = \"\") {\n\tctlFrame <- ttkframe(parent)\n\tpath <- ttklabel(ctlFrame, text = \"Specimen Id: NA\")\n\ttkpack(path)\n\n\tlineNumLabel <- ttklabel(ctlFrame, text = \"n links: 0\")\n\ttkpack(lineNumLabel)\n\n\tif(id == \"slider\") {\n\t\tassign(\"sliderImgPath\", path, envir = .GlobalEnv)\n\t\tassign(\"sliderLineNumLabel\", lineNumLabel, envir = .GlobalEnv)\n\t}else if(id == \"link\") {\n\t\tassign(\"linkImgPath\", path, envir = .GlobalEnv)\n\t\tassign(\"linkLineNumLabel\", lineNumLabel, envir = .GlobalEnv)\n\t}\n\n\treturn (ctlFrame)\n}\n\nalertBox <- function(msg) {\n\twin <- tktoplevel(height=100, width=180)\n\ttkwm.title(win, \"Alert\")\n\tlabel = tklabel(win, text=msg)\n\tokBtn <- ttkbutton(win, text = \"OK\", command = function() tkdestroy(win))\n\tsapply(list(label, okBtn), tkpack, padx = 6, pady = 16)\n}\n\ngetLineNum <- function(lineStatus) {\n\tlen <- 0\n\tif(length(lineStatus)) {\n\t\tfor(i in 1:length(lineStatus)) {\n\t\t\tif(lineStatus[[i]] != \"removed\") {len = len+1}\n\t\t}\n\t}\n\treturn (len)\n}\n\nitemRemove <-function(x, y) {\n\ttab <- get(\"tab\", envir = .GlobalEnv)\n\tif(tab == 1) {\n\t\tpopUpRemoveWindow(x, y, 'Do you want to delete this line?', \"linkLine\")\n\t}else if(tab ==2) {\n\t\tpopUpRemoveWindow(x, y, 'Do you want to delete this line?', \"sliderLine\")\n\t}\n}\n\npopUpRemoveWindow <- function(x, y, msg, item) {\n\twin <- tktoplevel()\n\n\tlabel = tklabel(win, text=msg)\n\ttkpack(label, fill = \"x\", padx = 5, pady = 5)\n\n\tbtnFrame <- ttkframe(win)\n\ttkpack(btnFrame, fill = \"x\", padx = 5, pady = 5)\n\tcancelBtn <- ttkbutton(btnFrame, text = \"cancel\", command = function() tkdestroy(win))\n\tif(item == \"digdot\") {\n\t\tokBtn <- ttkbutton(btnFrame, text = \"ok\",command = function() digRemoveDotOk(x, y))\n\t}else if(item == \"linkLine\") {\n\t\tokBtn <- ttkbutton(btnFrame, text = \"ok\",command = function() linkRemoveLineOk(x, y))\n\t}else if(item == \"sliderLine\") {\n\t\tokBtn <- ttkbutton(btnFrame, text = \"ok\",command = function() sliderRemoveLineOk(x, y))\n\t}\n\n\ttkpack(ttklabel(btnFrame, text = \" \"), expand = TRUE, fill = \"y\", side = \"left\")\n\tsapply(list(cancelBtn, okBtn), tkpack, side = \"left\", padx = 6)\n\n\tassign(\"removeWin\", win, envir = .GlobalEnv)\n\ttkfocus(win)\n}\n\nshowLines <- function(imgId) {\n\t#print(\"begin showLines\")\n    tpsDataList <- get(\"activeDataList\", envir = .GlobalEnv)\n\tcoords <- tpsDataList[[imgId]][[3]]\n    lineList <- tpsDataList[[imgId]][[8]]\n\tstatus <- tpsDataList[[1]][[9]]\n\n\tcanvas <- get(\"activeCanvas\", envir = .GlobalEnv)\n\ttkdelete(canvas, \"line\")\n\tnlines <- 0\n\ttab <- get(\"tab\", envir = .GlobalEnv)\n\n    if(length(lineList)) {\n        for(i in 1:length(status)){\n            if(status[[i]] == \"removed\") {next}\n\n\t\t\tnlines <- nlines +1\n\n            dot1 <- as.integer(lineList[[i]][1])\n\t\t\tdot2 <- as.integer(lineList[[i]][2])\n            x1 <- coords[[dot1]][1]\n            y1 <- coords[[dot1]][2]\n\t\t\tx2 <- coords[[dot2]][1]\n            y2 <- coords[[dot2]][2]\n\n\t\t\titem <- tkcreate(activeCanvas, \"line\", x1, y1, x2, y2, width=2, fill=\"green\")\n\t\t\ttkaddtag(activeCanvas, \"line\", \"withtag\", item)\n\t\t\t#print(paste(imgId,\"showLines: draw line\", item, dot1, dot2))\n\t\t\tif(tab == 1) {\n\t\t\t\ttpsDataList[[imgId]][[8]][[i]] <- c(dot1, dot2, item)\n\t\t\t} else if(tab == 2) {\n\t\t\t\tdot3 <- as.integer(lineList[[i]][3])\n\t\t\t\tx3 <- coords[[dot3]][1]\n\t\t\t\ty3 <- coords[[dot3]][2]\n\t\t\t\titem2 <- tkcreate(activeCanvas, \"line\", x2, y2, x3, y3, width=2, fill=\"green\")\n\t\t\t\ttkaddtag(activeCanvas, \"line\", \"withtag\", item)\n\t\t\t\ttpsDataList[[imgId]][[8]][[i]] <- c(dot1, dot2, dot3, item, item2)\n\t\t\t}\n        }\n\n\t\tassign(\"activeDataList\", tpsDataList, envir = .GlobalEnv)\n\n\t\tif(tab == 1) {\n\t\t\tlineNumLabel <- get(\"linkLineNumLabel\", envir = .GlobalEnv)\n\t\t\ttkconfigure(lineNumLabel, text = paste(\"n links =\", nlines))\n\t\t}else if(tab == 2) {\n\t\t\tlineNumLabel <- get(\"sliderLineNumLabel\", envir = .GlobalEnv)\n\t\t\ttkconfigure(lineNumLabel, text = paste(\"n sliders =\", nlines))\n\t\t}\n    }\n}\n\nshowDots <- function(imgId) {\n\t#print(\"begin showDots\")\n\n    tpsDataList <- get(\"activeDataList\", envir = .GlobalEnv)\n    coords <- tpsDataList[[imgId]][[3]]\n\tstatusList <- tpsDataList[[imgId]][[5]]\n\n\tcanvas <- get(\"activeCanvas\", envir = .GlobalEnv)\n\ttkdelete(canvas, \"point\")\n\n    if(length(coords)) {\n        for(i in 1:length(statusList)){\n            if(statusList[[i]] == \"removed\") {next}\n\n            x <- as.integer(coords[[i]][1])\n            y <- as.integer(coords[[i]][2])\n\n\t\t\tif(statusList[[i]] == \"black\") {\n\n\t\t\t\tfill <- \"black\"\n\t\t\t\toutline <- \"red\"\n\t\t\t\tif((x == -1) && (y == -1)) { next }\n\t\t\t} else if (statusList[[i]] == \"middle\") {\n\n\t\t\t\tfill <- \"white\"\n\t\t\t\toutline <- \"red\"\n\t\t\t}else {\n\n\t\t\t\tfill <- \"red\"\n\t\t\t\toutline <- \"black\"\n\t\t\t}\n            item <- tkcreate(canvas, \"oval\", x - 6, y - 6, x + 6, y + 6,\n                         width=1, outline=outline,\n                         fill=fill)\n            tkaddtag(canvas, \"point\", \"withtag\", item)\n\n\t\t\tdotLabel <- tkcreate(canvas, \"text\", x + 12, y, text=i, fill=\"red\", font=c(\"Helvetica\", 12))\n\t\t\ttkaddtag(canvas, \"label\", \"withtag\", dotLabel)\n        }\n    }\n}\n\ngetRatio <- function(imgFile) {\n\t#print(\"getRatio\")\n\tratio <- 0\n\tif(file.exists(imgFile)) {\n\t\timg <- tclVar()\n\t\ttcl('image', 'create', 'photo', img, file=imgFile)\n\t\theight <- as.integer(tcl('image', 'height', img))\n\t\twidth <- as.integer(tcl('image', 'width', img))\n\n\t\tif(height/600 > 1) {\n\t\t\tratio <- as.integer(height/600)\n\t\t\tfitCanvasH <- height/ratio\n\t\t\tfitCanvasW <- width/ratio\n\t\t}else {\n\t\t\tratio <- as.integer(600/height)\n\t\t\t#zoom\n\t\t\tfitCanvasH <- height*ratio\n\t\t\tfitCanvasW <- width*ratio\n\t\t\tratio <- 1/ratio\n\t\t}\n\t\t#print(paste(imgFile, \"height:\", height, \"width:\", width, \"ratio:\", ratio, \"fitCanvasH:\", fitCanvasH, \"fitCanvasW:\", fitCanvasW))\n\t} else {\n\t\tprint(paste(\"File does not exists:\", imgFile))\n\t\tprint(\"Ignore it!!\")\n\t\treturn (c(0, 0, 0))\n\t}\n\n\treturn (c(ratio, fitCanvasW, fitCanvasH))\n}\n\nshowPicture <- function() {\n\t#myPrint(\"enter showPicture\")\n\t#clear canvas\n  canvas <- get(\"activeCanvas\", envir = .GlobalEnv)\n  tkdelete(canvas, \"all\")\n\n\ttpsDataList <- get(\"activeDataList\", envir = .GlobalEnv)\n\tid <- get(\"currImgId\", envir = .GlobalEnv)\n\tratio <- tpsDataList[[id]][[6]]\n\tcanvasH <- tpsDataList[[id]][[7]][2]\n\tcanvasW <- tpsDataList[[id]][[7]][1]\n\ttkconfigure(canvas, width=canvasW, height=canvasH)\n\n\tshowLines(id)\n\tshowDots(id)\n\n\ttab <- get(\"tab\", envir = .GlobalEnv)\n\tif(tab != 0) {\n\t\tupdateCtrlFrame()\n\t}\n}\n\nupdateCtrlFrame <- function() {\n\n\ttpsDataList <- get(\"activeDataList\", envir = .GlobalEnv)\n\ttab <- get(\"tab\", envir = .GlobalEnv)\n\tif(tab == 1) {\n\t\tlineNumLabel <- get(\"linkLineNumLabel\", envir = .GlobalEnv)\n\t\tlineText <- \"n links =\"\n\t\tpathLabel <- get(\"linkImgPath\", envir = .GlobalEnv)\n\t}else if(tab == 2) {\n\t\tlineNumLabel <- get(\"sliderLineNumLabel\", envir = .GlobalEnv)\n\t\tlineText <- \"n sliders =\"\n\t\tpathLabel <- get(\"sliderImgPath\", envir = .GlobalEnv)\n\t}\n\n\tnlines <- 0\n\tspecID <- \"NA\"\n\tif(length(tpsDataList) > 0) {\n\t\tnlines <- getLineNum(tpsDataList[[1]][[9]])\n\t\tspecID <- tpsDataList[[currImgId]][1]\n\t}\n\n\ttkconfigure(lineNumLabel, text = paste(lineText, nlines))\n    tkconfigure(pathLabel, text = paste(\"Specimen Id: \", specID))\n}\n\nonNext <- function() {\n\ttab <- get(\"tab\", envir = .GlobalEnv)\n    tpsDataList <- get(\"activeDataList\", envir = .GlobalEnv)\n\tnSpecimens <- length(tpsDataList)\n\tif(nSpecimens > 0) {\n\t\tif(tab == 0) {\n\t\t\tdigOnNext()\n\t\t}else {\n\t\t\tcurrImgId <- get(\"currImgId\", envir = .GlobalEnv)\n\n\t\t\t#check if it is the last picture\n\t\t\tif(currImgId < nSpecimens) {\n\t\t\t\tcurrImgId <- currImgId+1\n\t\t\t\tassign(\"currImgId\", currImgId, envir = .GlobalEnv)\n\t\t\t\tshowPicture()\n\t\t\t} else {\n\t\t\t\talertBox(\"It's the last specimen\")\n\t\t\t}\n\t\t}\n\t}\n}\n\nonPrevious <- function() {\n    tpsDataList <- get(\"activeDataList\", envir = .GlobalEnv)\n\tif(length(tpsDataList) > 0) {\n\t\ttab <- get(\"tab\", envir = .GlobalEnv)\n\t\tif(tab == 0) {\n\t\t\tdigOnPrevious()\n\t\t}else {\n\t\t\tcurrImgId <- get(\"currImgId\", envir = .GlobalEnv)\n\t\t\tif(currImgId > 1) {\n\t\t\t\tcurrImgId <- currImgId-1\n\t\t\t\tassign(\"currImgId\", currImgId, envir = .GlobalEnv)\n\t\t\t\tshowPicture()\n\t\t\t} else {\n\t\t\t\talertBox(\"It's the first specimen\")\n\t\t\t}\n\t\t}\n\t}\n}\n\nsaveToCsv <- function() {\n\ttpsDataList <- get(\"activeDataList\", envir = .GlobalEnv)\n\tif(length(tpsDataList) <= 0) {\n\t\talertBox(\"Nothing to be saved\")\n\t\treturn ()\n\t}\n\t#select the location\n\tfilename <- tclvalue(tkgetSaveFile(filetypes=\"{TPS {.csv}}\"))\n\tif (!nchar(filename)) {\n\t\treturn ()\n\t}\n\n\tif (length(grep(\".csv\",x = filename)) <= 0 ) {\n\t\tfilename <- paste(filename,\".csv\", sep = \"\")\n    }\n\n\tfile.create(filename, showWarnings=TRUE)\n\tlineCoord <- tpsDataList[[1]][[8]]\n\tlineStatus <- tpsDataList[[1]][[9]]\n\tlineNum <- getLineNum(lineStatus)\n\n\tncolumn <- 2\n\ttab <- get(\"tab\", envir = .GlobalEnv)\n\tif(tab == 2) {\n\t\twrite(\"before,slide,after\",filename,append = TRUE)\n\t\tncolumn <- 3\n\t}\n\tselected <- matrix(NA, nrow = lineNum, ncol = ncolumn)\n\n\tid <- 1\n\tj <- 1\n\twhile(id <= lineNum){\n\t\tif(lineStatus[[j]] != \"removed\") {\n\t\t\tselected[id, 1] <- as.integer(lineCoord[[j]][1])\n\t\t\tselected[id, 2] <- as.integer(lineCoord[[j]][2])\n\t\t\tif(tab == 2) {\n\t\t\t\tselected[id, 3] <- as.integer(lineCoord[[j]][3])\n\t\t\t}\n\t\t\tid <- id + 1\n\t\t}\n\t\tj <- j+1\n\t}\n\n\twrite.table(selected, filename, sep = \",\", col.names = FALSE, row.names = FALSE,append=TRUE)\n}\n\nimportTpsFile <- function(tpsfile) {\n\ttpsdata <- readland.tps2(file=tpsfile, specID = \"ID\")\n\n\t#######################################################################################\n\t# 7.30.2017 - EOC added to get tpsdata with its original\n\t# filename into the global environment\n\tfile.name <- sub(x = basename(tpsfile), pattern = \".tps\",replacement = \"\",ignore.case = TRUE)\n\tpos<-1\n\tenvir <- as.environment(pos)\n\tassign(file.name, tpsdata$coords, envir = envir)\n\t############################################################################################\n\n\tolddat <- tpsdata$coords\n\tinscale <- tpsdata$scale\n\n\tfilelist <- dimnames(olddat)[[3]]\n\tnSpecimens <- dim(olddat)[3]\n\tnlandmarks <- dim(olddat)[1]\n\ttpsDataList <- list()\n\n\tspecId <- 1\n\tfor(i in 1:nSpecimens){\n\t\tratioV <- getRatio(filelist[[i]])\n\n\t\tratio <- ratioV[1]\n\t\tcanvasW <- ratioV[2]\n\t\tcanvasH <- ratioV[3]\n\t\t#print(paste(\"ratio\", ratio, \"canvas h\", canvasH, \"canvas w\", canvasW))\n\t\tif(ratio == 0) {\n\t\t\tnSpecimens <- nSpecimens-1\n\t\t\tnext\n\t\t}\n\n\t\ttpsDataList[[specId]] <- list(filelist[[i]], inscale[i], list(), \"inches\", list(), ratio, c(canvasW, canvasH), list(), list())\n\n\t\tcoords <- olddat[, , i]\n\t\ttemp <- list()\n\t\tstatusList <- list()\n\n\t\tfor (j in 1:nlandmarks){\n\t\t\tif(!is.na(coords[j, 1])) {\n\t\t\t\ttemp[[j]] <- c(as.numeric(coords[j, 1])/ratio, canvasH-as.numeric(coords[j, 2])/ratio)\n\t\t\t\tstatusList[[j]] <- \"normal\"\n\n\t\t\t}else {\n\t\t\t\ttemp[[j]] <- c(-1, -1)\n\t\t\t\tstatusList[[j]] <- \"black\"\n\t\t\t}\n\t\t}\n\t\ttpsDataList[[specId]][[5]] <- statusList\t\t#dot status list\n\t\ttpsDataList[[specId]][[3]] <- temp \t#landmarks\n\n\t\tspecId <- specId+1\n\t}\n\n\tif(nSpecimens > 0) {\n\t\tassign(\"activeDataList\", tpsDataList, envir = .GlobalEnv)\n\t\tassign(\"currImgId\", 1, envir = .GlobalEnv)\n\t\tassign(\"landmarkNum\", nlandmarks, envir = .GlobalEnv)\n\n\t\ttab <- get(\"tab\", envir = .GlobalEnv)\n\t\tif(tab == 0) {\n\t\t\tdigitizeInit()\n\t\t\tassign(\"digData\", tpsDataList, envir = .GlobalEnv)\n\t\t\tassign(\"digCurrImgId\", 1, envir = .GlobalEnv)\n\t\t\tdigUpdateSpecNumber(nSpecimens)\n\t\t\tdigShowPicture()\n\t\t}else if (tab == 1) {\n\t\t\tlinkInit()\n\t\t\tassign(\"linkData\", tpsDataList, envir = .GlobalEnv)\n\t\t\tshowPicture()\n\t\t}else if(tab == 2) {\n\t\t\tsliderInit()\n\t\t\tassign(\"sliderData\", tpsDataList, envir = .GlobalEnv)\n\t\t\tshowPicture()\n\t\t}\n\t}\n}\n\nimportFile <- function(id) {\n\ttab <- get(\"tab\", envir = .GlobalEnv)\n\tif(tab == 1) {\n\t\ttpsfile <- linkFiles[id]\n\t} else if(tab == 2) {\n\t\ttpsfile <- sliderFiles[id]\n\t}\n\timportTpsFile(tpsfile)\n}\n\nopenTpsFile <- function() {\n    tpsfileName <- tclvalue(tkgetOpenFile( filetypes = \"{{tps file} {.tps}}\"))\n\n    if (tpsfileName != \"\") {\n\t\timportTpsFile(tpsfileName)\n\t\ttab <- get(\"tab\", envir = .GlobalEnv)\n\t\t#record user opened tps file recently\n\t\tif(tab != 0) {\n\t\t\timportFileList <- \"\"\n\t\t\tif(tab == 1) {\n\t\t\t\timportFileList <- \"linkTpsFiles.txt\"\n\t\t\t}else if(tab == 2) {\n\t\t\t\timportFileList <- \"sliderTpsFiles.txt\"\n\t\t\t}\n\t\t\tif(file.exists(importFileList)) {\n\t\t\t\tcontent <- scan(file = importFileList, what = \"char\", sep = \"\\n\", quiet = TRUE)\n\t\t\t\texisting <- grep(tpsfileName, content, TRUE)\n\t\t\t\tif(length(existing) > 0) {\n\t\t\t\t\tmyPrint(paste(tpsfileName,\"already exists, ignore it\"))\n\t\t\t\t\treturn ()\n\t\t\t\t}\n\t\t\t}else {\n\t\t\t\tfile.create(importFileList, showWarnings = TRUE)\n\t\t\t}\n\t\t\twrite(tpsfileName,importFileList,append = TRUE)\n\t\t}\n\t}\n}\n\ngetDotId <- function(x, y) {\n    tpsDataList <- get(\"activeDataList\", envir = .GlobalEnv)\n    currImgId <- get(\"currImgId\", envir = .GlobalEnv)\n    coords <- tpsDataList[[currImgId]][[3]]\n\tstatusList <- tpsDataList[[currImgId]][[5]]\n\tif(length(coords)) {\n\t\tfor(i in 1:length(coords)){\n\t\t\tif(statusList[[i]] == \"removed\") {next}\n\t\t\tif( (abs(as.integer(coords[[i]][1]) - as.integer(x)) <= 6)\n\t\t\t\t\t&& (abs(as.integer(coords[[i]][2]) - as.integer(y)) <= 6)) {\n\t\t\t\treturn (i)\n\t\t\t}\n\t\t}\n\t}\n\n\treturn (0)\n}\n\nwriteland.tps<-function(A, file, scale = NULL, specID = TRUE, imgPath = TRUE){\n  n<-dim(A)[3]\n  k<-dim(A)[2]\n  p<-dim(A)[1]\n\n  lmline<-ifelse(k==2,paste(\"LM=\",p,sep=\"\"), paste(\"LM3=\",p,sep=\"\"))\n  file.create(file, showWarnings=TRUE)\n  if(!is.null(scale)){\n    scaleline<-paste(\"SCALE\", \"=\", scale, sep=\"\")\n  }\n  for(i in 1:n){\n    write(lmline,file,append = TRUE)\n    write.table(A[,,i],file,col.names = FALSE, row.names = FALSE,append=TRUE)\n\tif(imgPath==TRUE){\n      if(is.null(dimnames(A)[[3]])) dimnames(A)[[3]] <- c(1:dim(A)[3])\n      imgPathLine<-paste(\"IMAGE=\",dimnames(A)[[3]][i],sep=\"\")\n      write(imgPathLine,file,append = TRUE)\n    }\n    if(!is.null(scale)){\n      if(length(scaleline) == 1){write(scaleline,file,append=TRUE)}\n      if(length(scaleline) > 1){write(scaleline[i],file,append=TRUE)}\n    }\n    if(specID==TRUE){\n      if(is.null(dimnames(A)[[3]])) dimnames(A)[[3]] <- c(1:dim(A)[3])\n      idline<-paste(\"ID=\",dimnames(A)[[3]][i],sep=\"\")\n      write(idline,file,append = TRUE)\n    }\n    write(\"\",file,append = TRUE)\n  }\n}\n\n##Function to read tps file for digitize2d (streamlined for specific use)\nreadland.tps2 <- function (file, specID = c(\"None\", \"ID\", \"imageID\"))\n{\n  ignore.case = TRUE\n  specID <- match.arg(specID)\n  tpsfile <- scan(file = file, what = \"char\", sep = \"\\n\", quiet = TRUE)\n  lmdata <- grep(\"LM=\", tpsfile, ignore.case)\n  if (length(lmdata !=0)) {\n    nland <- as.numeric(sub(\"LM=\", \"\", tpsfile[lmdata], ignore.case))\n    k <- 2\n  }\n  if (length(lmdata) == 0) {\n    lmdata <- grep(\"LM3=\", tpsfile, ignore.case)\n    nland <- as.numeric(sub(\"LM3=\", \"\", tpsfile[lmdata], ignore.case))\n    k <- 3\n  }\n  n <- nspecs <- length(lmdata)\n  if (max(nland) - min(nland) != 0) {\n    stop(\"Number of landmarks not the same for all specimens.\")\n  }\n  p <- nland[1]\n  imscale <- as.numeric(sub(\"SCALE=\", \"\", tpsfile[grep(\"SCALE\",\n                                                       tpsfile, ignore.case)], ignore.case))\n  if (is.null(imscale)) {\n    imscale = array(0, nspecs)\n  }\n  if (length(imscale)==0) {\n    imscale = array(0, nspecs)\n  }\n  if (length(imscale) != nspecs) {\n    imscale = array(1, nspecs)\n  }\n  tmp <- tpsfile[-(grep(\"=\", tpsfile))]\n  options(warn = -1)\n  tmp <- matrix(as.numeric(unlist(strsplit(tmp,\"\\\\s+\"))),ncol = k, byrow = T)\n\n  coords <- aperm(array(t(tmp), c(k, p, n)), c(2, 1, 3))\n  #  imscale <- aperm(array(rep(imscale, p * k), c(n, k, p)), c(3, 2, 1))\n  #  coords <- coords * imscale\n  coords<-coords[1:nland,,]\n  if(n==1) coords <- array(coords, c(nland,k,n))\n  if (specID == \"imageID\") {\n    imageID <- (sub(\"IMAGE=\", \"\", tpsfile[grep(\"IMAGE\", tpsfile, ignore.case)],\n                    ignore.case))\n    if (length(imageID) != 0) {\n      imageID <- sub(\".jpg\", \"\", imageID, ignore.case)\n      imageID <- sub(\".tif\", \"\", imageID, ignore.case)\n      imageID <- sub(\".bmp\", \"\", imageID, ignore.case)\n      imageID <- sub(\".tiff\", \"\", imageID, ignore.case)\n      imageID <- sub(\".jpeg\", \"\", imageID, ignore.case)\n      imageID <- sub(\".jpe\", \"\", imageID, ignore.case)\n      dimnames(coords)[[3]] <- as.list(imageID)\n    }\n  }\n  if (specID == \"ID\") {\n    ID <- sub(\"ID=\", \"\", tpsfile[grep(\"ID\", tpsfile, ignore.case)], ignore.case)\n    if (length(ID) != 0) {\n      dimnames(coords)[[3]] <- as.list(ID)\n    }\n  }\n  return(list(coords = coords,scale=imscale)  )\n}\n\nmyPrint <- function(content) {\n\tif(isDebug) {\n\t\tprint(content)\n\t}\n}\n",
    "created" : 1502221980045.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "15|32|61|0|\n63|27|78|0|\n80|42|116|0|\n118|36|128|0|\n130|44|147|0|\n149|27|155|0|\n157|36|165|0|\n167|29|174|0|\n176|48|198|0|\n200|30|250|0|\n252|29|292|0|\n294|31|322|0|\n324|27|344|0|\n346|31|369|0|\n371|22|391|0|\n393|26|410|0|\n412|25|456|0|\n458|36|535|0|\n537|28|545|0|\n547|27|574|0|\n576|28|592|0|\n594|78|623|0|\n627|1|686|0|\n688|30|692|0|\n",
    "hash" : "2378773015",
    "id" : "29B4A4A6",
    "lastKnownWriteTime" : 1502253085,
    "last_content_update" : 1502253085870,
    "path" : "E:/Dropbox (LCA)/Documents/Research/zoaRch_project/zooaRchGUI_v1/zooarchGUI/R/2dDigitize.r",
    "project_path" : "R/2dDigitize.r",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}