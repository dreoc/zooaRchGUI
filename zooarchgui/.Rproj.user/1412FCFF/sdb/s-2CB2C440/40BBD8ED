{
    "collab_server" : "",
    "contents" : "# death_age_fun\nlayout.death_age <- function(e){\n    print(\"death_age layout\")\n    e$data <- tclVar(\"Choose one\");\n    e$labels <- tclVar(\"Choose one\");\n    e$dataFrame1<-tclVar(\"NULL\")\n    e$dataFrame2<-tclVar(\"NULL\")\n    e$models <- tclVar(\"NULL\");\n    e$func <- tclVar(\"Survivorship\"); #Selects Survivorship for the \"Functions:\" secetion (Defaults to Survivorship)\n    e$conf.level <- tclVar(95);\n    e$iter <- tclVar(\" \")\n\n\n    #Begin GUI Setup\n    tkwm.title(e$wnd, \"Survivorship Dialog\")\n    tkconfigure(e$layout, text = \"Surviorship\")\n    columnConfig(e$layout)\n\n    #Data Combobox\n    put_label(e$layout, \"Data:\", 0, 0, sticky = \"e\")\n    data_combo <- ttkcombobox(e$layout, state = \"readonly\",\n                              values = dfs.fun(),\n                              textvariable = e$data)\n    tkgrid(data_combo, row = 0, column = 1, sticky=\"ew\", padx = 2)\n    tkbind(data_combo, \"<<ComboboxSelected>>\", function() updateDataFrame(e, e$data, \"dataFrame1\"))\n    tkfocus(data_combo)                      # give focus\n\n    #Labels Combobox\n    put_label(e$layout, \"Labels:\",1,0, sticky = \"e\")\n    data_labels <- ttkcombobox(e$layout, state = \"readonly\",\n                               values = dfs.fun(),\n                               textvariable = e$labels)\n    tkgrid(data_labels, row = 1, column = 1, sticky=\"ew\", padx = 2)\n    tkbind(data_labels, \"<<ComboboxSelected>>\", function() updateDataFrame(e, e$labels, \"dataFrame2\"))\n    tkfocus(data_labels)\n\n    #Models Combobox\n    put_label(e$layout, \"Model:\",2,0, sticky = \"e\")\n    data_models <- ttkcombobox(e$layout, state = \"readonly\",\n                               values = c(1:5),\n                               textvariable = e$models)\n    tkgrid(data_models, row = 2, column = 1, sticky=\"ew\", padx = 2)\n    tkfocus(data_models)\n\n    #Conf.level Slider\n    put_label(e$layout, \"conf.level:\", 3, 0, sticky = \"e\")\n    conf_level_frame <- ttkframe(e$layout)\n    tkgrid(conf_level_frame, row = 3, column = 1, columnspan = 2,\n           sticky = \"w\")\n    conf_level_scale <- ttkscale(conf_level_frame,\n                                 from = 75, to = 100,\n                                 variable = e$conf.level)\n    #Conf.level Spinbox\n    tkspinbox <- function(parent, ...)\n        tkwidget(parent, \"tk::spinbox\", ...)\n    conf_level_spin <- tkspinbox(conf_level_frame,\n                                 from = 75, to = 100, increment = 1,\n                                 textvariable = e$conf.level, width = 5)\n    tkpack(conf_level_scale, side = \"left\")\n    tkpack(conf_level_spin, side = \"left\")\n\n    #Function Radiobutton\n    put_label(e$layout, \"Functions:\",4,0, sticky = \"e\")\n    rb_frame <- ttkframe(e$layout)\n    sapply(c(\"Survivorship\",\"Mortality\",\"Epiphyseal Fusion\"), function(i) {\n               radio_button <- tk2radiobutton(rb_frame, variable = e$func,text = i, value = i)\n               tkpack(radio_button, side = \"left\")\n                                 })\n    tkgrid(rb_frame, row = 4, column = 1, sticky = \"w\")\n\n    #Iterations Spinbox\n    put_label(e$layout, \"Iterations:\",5,0, sticky = \"e\")\n    iter_frame <- tkspinbox(e$layout, from = 10, to = 10000, increment = 10, textvariable = e$iter, width = 6)\n    tkgrid(iter_frame, row = 5, column = 1, sticky=\"w\", padx = 2)\n}\n\nrun.death_age <- function(e) {\n    print(\"death_age run\")\n    conf.level<-Fusion.groups<-UpperCI<-LowerCI<-Count<-NULL\n    # Wrapper for 3 Survival Functions\n    runFunc <- function(Data=NULL,func=NULL,labels=NULL, models=NULL, ci=NULL, plot=TRUE, iter=NULL) {\n\n        #Survivorship Function\n        if (func==\"Survivorship\") {\n            surv.func<-function(SurviveData=Data, labels=labels, models=models, ci=conf.level, plot=TRUE, iter=iter, usermod=NULL){\n                data<-SurviveData$Ageclass\n                N.ages<-max(data)\n                if(!is.null(labels)){\n                    Labels.ageclass <-labels\n                }\n                if(is.null(labels)){\n                    Labels.ageclass <-1:N.ages\n                }\n                if(!is.null(usermod) & !is.list(usermod)){\n                    stop(\"usmod MUST be entered as a list\")\n                }\n                survivorcurve.Eq4 <- function(data){\n                    vector <- rep(1, N.ages+1)\n                    for(i in 1:N.ages+1) {\n                        vector[i] <- vector[i-1]*(sum(data >= (i-1)) - sum(data == (i-1)))/sum(data >= (i-1))\n                    }\n                    vector[is.na(vector)] <- 0\n                    round(vector,4)\n                }\n                survivorcurve.Eq4(data)\n                survive.matrix <- matrix(NA, ncol = N.ages+1, nrow = iter)\n                survive.matrix[1,] <- survivorcurve.Eq4(data)\n                for(i in 2:iter){\n                    bootstrap <- sample(1:length(data), length(data), replace = TRUE)\n                    survive.matrix[i,] <- survivorcurve.Eq4(data[bootstrap])\n                }\n                ci<-ci/100\n                upCI<-apply(survive.matrix[,-1], MARGIN = 2, FUN = quantile,\n                            probs = ci+((1-ci)/2))\n                loCI<-apply(survive.matrix[,-1], MARGIN = 2, FUN = quantile,\n                            probs = ((1-ci)/2))\n                if (plot==TRUE){\n                    plot(x = (1:N.ages), y = survive.matrix[1,-1], type = \"n\", xlab = \"Age Class\",\n                         ylab = \"Proportion Survived\", axes = FALSE, ylim = c(0,1))\n                    polygon(c(1:N.ages,rev(1:N.ages)),c(loCI,rev(upCI)),col=\"light gray\",border=NA)\n\n                    #Formating the Axes\n                    axis(side = 1, at = 1:N.ages, labels = Labels.ageclass)\n                    axis(side = 2)\n                    lines(x = (1:N.ages), y = survive.matrix[1,-1], lwd = 2)\n\n                    #Plotting the Confidence Intervals\n                    lines(x = 1:N.ages, y = loCI, lty = \"dashed\", ylim = c(0,1))  #Plotting the lower confidence interval (2.5%)\n                    lines(x = 1:N.ages, y = upCI, lty = \"dashed\", ylim = c(0,1)) #Plotting the upper confidence interval (97.5%)\n                    if(!is.null(models) & is.null(usermod)){\n                        surv.model<-list(Security = c(.904, .904, .645, .38, .25, .239, .171, .118, 0),\n                                         Milk = c(.47, .42, .39, .35, .28, .23, .19, .1, 0),\n                                         Wool = c(.85, .75, .65, .63, .57, .50, .43, .20, 0),\n                                         Catastrophic = c(.86, .73, .60, .49, .39, .31, .23, .16, .11, .07, .03, .01, 0),\n                                         Attritional = c(.76, .53, .48, .46, .45, .42, .39, .34, .29, .20, .11, .03, 0))\n                        for(j in 1:length(models)){\n                            i<-models[j]\n                            lines(x = 1:N.ages, y = surv.model[[i]], col = j+1, lwd = 2, lty = j)\n                        }\n                        legend(x = \"topright\", cex = .75, lwd = 2,lty = c(1,2,1:length(models)),\n                               col = c(1,1,2:(length(models)+1)),\n                               legend = c(\"Survivorship\", paste(ci,\"% Confidence Interval\",sep=\"\"), names(surv.model)[models]))\n                    }\n                    if(!is.null(usermod)){\n                        surv.model<-usermod\n                        models<-1:length(surv.model)\n                        for(j in 1:length(models)){\n                            i<-models[j]\n                            lines(x = 1:N.ages, y = surv.model[[i]], col = j+1, lwd = 2, lty = j)\n                        }\n                        legend(x = \"topright\", cex = .75, lwd = 2,lty = c(1,2,1:length(models)),\n                               col = c(1,1,2:(length(models)+1)),\n                               legend = c(\"Survivorship\", paste(ci,\"% Confidence Interval\",sep=\"\"), names(surv.model)[models]))\n                    }\n                }\n                data.UpperCI <- upCI\n                data.PointValue <- survive.matrix[1,-1]\n                data.LowerCI <- loCI\n                Taxon <- rep(unique(SurviveData$Genus), times = N.ages)\n                Output.Matrix <- data.frame(Taxon = Taxon, AgeClassLabs = Labels.ageclass, LowerCI = data.LowerCI,\n                                            PointValue = data.PointValue, UpperCI = data.UpperCI)\n                return(Output.Matrix)\n            }\n            Output.Matrix<- surv.func(SurviveData=Data, labels=labels, models=models, ci=ci, plot=TRUE, iter=iter, usermod=NULL)\n        }\n        #Mortality Function\n        if (func == \"Mortality\") {\n            mort.func<-function(mortData=Data,labels=labels, models=models, ci=conf.level, plot=TRUE, iter=iter, usermod=NULL,lsize=.01,...){\n                data<-mortData$Ageclass\n                N.ages<-max(data)\n                if(!is.null(labels)){\n                    Labels.ageclass <-labels\n                }\n                if(is.null(labels)){\n                    Labels.ageclass <-1:N.ages\n                }\n                if(!is.null(usermod) & !is.list(usermod)){\n                    stop(\"usmod MUST be entered as a list\")\n                }\n                mortprof <- function(data){\n                    vector <- rep(NA, N.ages)\n                    for(i in 1:N.ages) {\n                        vector[i] <- sum(data==i)/length(data)\n                    }\n                    vector[is.na(vector)] <- 0\n                    round(vector,4)\n                }\n                mortprof(data)\n                mortality.matrix <- matrix(NA, ncol = N.ages, nrow = iter)\n                mortality.matrix[1,] <- mortprof(data)\n                for(i in 2:iter){\n                    bootstrap <- sample(1:length(data), length(data), replace = TRUE)\n                    mortality.matrix[i,] <- unlist(mortprof(data[bootstrap]))\n                }\n                ci<-ci/100\n                upCI<-apply(mortality.matrix[,], MARGIN = 2, FUN = quantile,\n                            probs = ci+((1-ci)/2))\n                loCI<-lo<-apply(mortality.matrix[,], MARGIN = 2, FUN = quantile,\n                                probs = ((1-ci)/2))\n                if (plot==TRUE){\n                    ylab=\"Mortality\"\n                    xlab = \"Age Class\"\n                    if(is.null(models) & is.null(usermod)){\n                        bar<-barplot(mortality.matrix[1,],ylim=c(0,(max(upCI)+.1)),\n                                     names=Labels.ageclass,ylab=ylab,\n                                     xlab=xlab,beside=T)\n                        g<-(max(bar)-min(bar))/110\n                        for (i in 1:length(bar)){\n                            lines(c(bar[i],bar[i]),c(upCI[i],loCI[i]))\n                            lines(c(bar[i]-g,bar[i]+g),c(upCI[i],upCI[i]))\n                            lines(c(bar[i]-g,bar[i]+g),c(loCI[i],loCI[i]))\n                        }\n                    }\n                    if(!is.null(models) & is.null(usermod)){\n                        mort.model<-list(Security = c(.096, 0, .259, .265, .13, .011, .068, .053, .118),\n                                         Milk = c(.53, .05, .03, .04, .07, .05, .04, .09, .1),\n                                         Wool = c(.15, .10, .10, .02, .06, .07, .07, .23, .20),\n                                         Catastrophic = c(.14, .13, .13, .11, .10, .08, .08, .07, .05, .04, .04, .02, .01),\n                                         Attritional = c(.24, .23, .05, .02, .01, .03, .03, .05, .05, .09, .09, .08, .03))\n                        dat<-rbind(mortality.matrix[1,],\n                                   do.call(rbind,lapply(mort.model[models],matrix,\n                                                        ncol=length(mortality.matrix[1,]),\n                                                        byrow=TRUE)))\n                        par(mfrow=c(length(models),1))\n                        ylab=\"Mortality\"\n                        xlab = \"Age Class\"\n                        for(j in 2:dim(dat)[1]){\n                            bar<-barplot(rbind(mortality.matrix[1,],dat[j,]),ylim=c(0,(max(c(upCI,dat))+.1)),names=Labels.ageclass,ylab=ylab,\n                                         xlab=xlab,beside=T,col=c(\"gray\",\"black\"))\n                            bar<-bar[1,]\n                            g<-(max(bar)-min(bar))/110\n                            for (i in 1:length(bar))         {\n                                lines(c(bar[i],bar[i]),c(upCI[i],loCI[i]))\n                                lines(c(bar[i]-g,bar[i]+g),c(upCI[i],upCI[i]))\n                                lines(c(bar[i]-g,bar[i]+g),c(loCI[i],loCI[i]))\n                            }\n                            #lines(x = bar, y = dat[j,],  lwd = 2,col=\"red\")\n                            legend(x = \"topright\",\n                                   fill=c(NA,\"gray\",\"black\"),border=c(NA,1,1),lty=c(1,0,0),\n                                   ncol=3,cex=.75,y.intersp=lsize,\n                                   legend = c(paste(ci*100,\"% CI\",sep=\"\"), \"Observed\",names(mort.model)[models][j-1]))\n                        }\n                        par(mfrow=c(1,1))\n                    }\n                    if(!is.null(usermod)){\n                        mort.model<-usermod\n                        models<-1:length(mort.model)\n                        dat<-rbind(mortality.matrix[1,],\n                                   do.call(rbind,lapply(mort.model[models],matrix,\n                                                        ncol=length(mortality.matrix[1,]),\n                                                        byrow=TRUE)))\n                        par(mfrow=c(length(models),1))\n                        ylab=\"Mortality\"\n                        xlab = \"Age Class\"\n                        for(j in 2:dim(dat)[1]){\n                            bar<-barplot(rbind(mortality.matrix[1,],dat[j,]),ylim=c(0,(max(c(upCI,dat))+.1)),names=Labels.ageclass,ylab=ylab,\n                                         xlab=xlab,beside=T,col=c(\"gray\",\"black\") )\n                            bar<-bar[1,]\n                            g<-(max(bar)-min(bar))/110\n                            for (i in 1:length(bar))         {\n                                lines(c(bar[i],bar[i]),c(upCI[i],loCI[i]))\n                                lines(c(bar[i]-g,bar[i]+g),c(upCI[i],upCI[i]))\n                                lines(c(bar[i]-g,bar[i]+g),c(loCI[i],loCI[i]))\n                            }\n                            #lines(x = bar, y = dat[j,],  lwd = 2,col=\"red\")\n                            legend(x = \"topright\",\n                                   fill=c(NA,\"gray\",\"black\"),border=c(NA,1,1),lty=c(1,0,0),\n                                   ncol=3,cex=.75,y.intersp=lsize,\n                                   legend = c(paste(ci*100,\"% CI\",sep=\"\"), \"Observed\",names(mort.model)[models][j-1]))\n                        }\n                        par(mfrow=c(1,1))\n                    }\n                }\n                data.LowerCI <-loCI\n                data.PointValue <- mortality.matrix[1,]\n                data.UpperCI <- upCI\n                Taxon <- rep(unique(mortData$Genus), times = N.ages)\n                Output.Matrix <- data.frame(Taxon = Taxon, AgeClassLabs = Labels.ageclass, LowerCI = data.LowerCI,\n                                            PointValue = data.PointValue, UpperCI = data.UpperCI)\n                return(Output.Matrix)\n            }\n            Output.Matrix<- mort.func(mortalityData=Data, labels=labels, models=models, ci=ci, plot=TRUE, iter=iter, usermod=NULL)\n        }\n        #Epiphyseal Fusion Function\n        if (func == \"Epiphyseal Fusion\") {\n            fuse.func<-function(data=Data,iter=1000,ci=95,plotci=TRUE,plot.title=NULL){\n                cat(paste(\"Enter number of fusion groups\"), \"\\n\")\n                ans<-readLines(n = 1)\n                ans <- as.numeric(ans)\n                fu.grps<-LETTERS[1:ans]\n                ske.n<-numeric(length(fu.grps))\n                for(i in 1:length(ske.n)){\n                    cat(paste(\"Enter number of skeletal elements for fusion group\"), fu.grps[i],\"\\n\")\n                    ans<-readLines(n = 1)\n                    ske.n[i] <- as.numeric(ans)\n                }\n                ele.list<-as.list(rep(NA,length(ske.n)))\n                names(ele.list)<-fu.grps\n                for(i in 1: length(ske.n)){\n                    cat(paste(\"Enter the\", ske.n[i],\"names of skeletal elements for fusion group\"), fu.grps[i],\"then press enter\",\"\\n\")\n                    ele.list[[i]]<-readLines(n = ske.n[i])\n                }\n                pctfuse<-function(dat){\n                    pct.ufu<-n<-numeric(length(ele.list))\n                    names(pct.ufu)<-fu.grps\n                    wh<-function(it){which(dat$Element==ele.list[[i]][it])}\n                    for (i in 1:length(pct.ufu)){\n                        tab<-table(dat$Fusion[unlist(lapply(1:ske.n[i],wh))])\n                        fu<-tab[which(names(table(dat$Fusion[unlist(lapply(1:ske.n[i],wh))] ))==\"Fused\")]\n                        ufu<-tab[which(names(table(dat$Fusion[unlist(lapply(1:ske.n[i],wh))] ))==\"Unfused\")]\n                        if (is.nan(fu/(fu+ufu))){\n                            pct.ufu[i]<-0} else {pct.ufu[i]<-fu/(fu+ufu)}\n                        n[i]<-(fu+ufu)\n                    }\n                    return(list(pct.ufu,n))\n                }\n                #Bootstrapping\n                boot <- matrix(NA, ncol = length(ele.list), nrow = iter)\n                boot[1,] <- pctfuse(data)[[1]]\n                for(i in 2:iter){\n                    data.boot<-data[sample(1:dim(data)[1],dim(data)[1],replace=T),]\n                    boot[i,] <- pctfuse(data.boot)[[1]]\n                }\n                ci<-ci/100\n                upCI<-ci+((1-ci)/2)\n                loCI<-((1-ci)/2)\n\n                #Creating a Table of the Bootstrap Results\n                quantilematrix <- matrix(NA, ncol = 2, nrow = length(fu.grps))\n                for(i in 1:ncol(boot)){\n                    quantilematrix[i,] <- quantile(boot[,i], probs = c(loCI, upCI), na.rm = T)\n                }\n                outputtable <- data.frame(Fusion.groups = fu.grps,\n                                          Data = round(boot[1,],2),\n                                          LowerCI = round(quantilematrix[,1],2), UpperCI = round(quantilematrix[,2],2),\n                                          Count = pctfuse(data)[[2]])\n\n                #Plotting the Fusion data\n                ciplot<-ggplot(outputtable, aes(x = Fusion.groups, y = Data))+\n                    geom_point(size = 3)+ #Adding the Points\n                    geom_errorbar(aes(ymax = UpperCI, ymin = LowerCI), width = 0.2)+  #adding the 95% confidence interval bars\n                        geom_text(aes(x = Fusion.groups, y = rep(1.05, length(Fusion.groups)), label = Count))+ #add in the sample size label for each fusion group\n                            theme(panel.background = element_blank(), #There is no background color for this plot\n                                  panel.grid.minor = element_blank(),\n                                  panel.border = element_rect(fill=NA, color = \"black\"),\n                                  axis.title = element_text(color = \"black\", size = 20), #Font Size\n                                  axis.text = element_text(color = \"black\", size = 15),\n                                  axis.ticks = element_line(color = \"black\", size = 0.75), #The Line Thickness\n                                  plot.title = element_text(color = \"black\", size = 24))+\n\n#Formatting the Output\nylab(\"%Fused\")+xlab(\"Fusion Group\")+\nggtitle(plot.title)\n                        if(plotci==TRUE){print(ciplot)}\nOuput.Matrix<-list(Output = outputtable, Bootstrap.Data = boot)\nreturn(Ouput.Matrix)\n            }\n        }\n        return(Output.Matrix)\n    }\n\n    models <- tclvalue(e$models)\n    if (models == \"NULL\"){\n        models <- NULL   #\n    } else {\n        models=as.numeric(unlist(models))\n    }\n    iter<-as.numeric(tclvalue(e$iter))\n    assign(\"iter\", iter, envir = e)\n    conf.level<-as.numeric(tclvalue(e$conf.level))\n    assign(\"conf.level\", conf.level, envir = e)\n    funcSelect <- tclvalue(e$func)\n    func <- switch(funcSelect, \"Survivorship\" = funcSelect, \"Mortality\" = funcSelect, \"Epiphyseal Fusion\" = funcSelect)\n    assign(\"func\", funcSelect, envir = e)\n    out<-runFunc(Data=e$dataFrame1,func=e$func,labels=unlist(e$dataFrame2), models=models, ci=e$conf.level, plot=TRUE, iter=e$iter)\n    pos<-1\n    envir <- as.environment(pos)\n    assign(\"Results\", out, envir = envir)\n    print(out)\n    tkdestroy(e$wnd)\n}\n\n# ksfun\nlayout.ks<-function(e){\n    e$ecdf<-tclVar(FALSE)\n\n    #Begin GUI Setup\n    tkwm.title(e$wnd, \"KS test Dialog\")\n    tkconfigure(e$layout, text = \"Kolmogorov-Smirnov Test\")\n\n    #ecdfplot Checkbox\n    put_label(e$layout, \"ecdf plot:\", 2, 0, sticky = \"e\")\n    ecdfplot_check <-ttkcheckbutton (e$layout , variable = e$ecdf)\n    tkgrid (ecdfplot_check , row = 2 , column = 1 , stick = \"w\" ,padx = 2)\n}\n\nrun.ks <- function(e){\n    varName <- getVarName(e, 1)\n    varValue <- get(varName,e$dataFrame,inherits=TRUE)\n    assign(\"varValue\", varValue, envir = e)\n\n    out<-suppressWarnings(ks.test(e$varValue,y=\"pnorm\")) # suppross warnings for now\n    out$data.name<-varName\n    pos<-1\n    envir <- as.environment(pos)\n    assign(\"Results\", out, envir = envir)\n    print(out)\n\n    #Plotting\n    if(as.numeric(tclvalue(e$ecdf)>0)){\n        x<-e$varValue\n        ref<-rnorm(10000,mean(x),sd(x))\n        plot(ecdf(x),xlim=range(c(x,ref)),main=paste(\"ecdf of \",varName))\n        lines(ecdf(ref),col=\"red\",lwd=2)\n    }\n    tkdestroy(e$wnd)\n}\n\n# tfun\nlayout.t<-function(e){\n    e$alternative <- tclVar(\"two.sided\");\n    e$paired<- tclVar(FALSE);\n    e$var <- tclVar(FALSE);\n    e$conf.level <- tclVar(95);\n\n    #Begin GUI Setup\n    tkwm.title(e$wnd, \"2-Sample t-test Dialog\")\n    tkconfigure(e$layout, text = \"2-Sample t-test\")\n\n    tkconfigure(e$varLabel[[1]], text = \"Variable 1:\")\n    tkconfigure(e$varLabel[[2]], text = \"Variable 2:\")\n\n    #Conf.level Slider\n    put_label(e$layout, \"conf.level:\", 3, 0, sticky = \"e\")\n    conf_level_frame <- ttkframe(e$layout)\n    tkgrid(conf_level_frame, row = 3, column = 1, columnspan = 2,\n           sticky = \"w\")\n    conf_level_scale <- ttkscale(conf_level_frame,\n                                 from = 75, to = 100,\n                                 variable = e$conf.level)\n    #Conf.level Spinbox\n    tkspinbox <- function(parent, ...)\n        tkwidget(parent, \"tk::spinbox\", ...)\n    conf_level_spin <- tkspinbox(conf_level_frame,\n                                 from = 75, to = 100, increment = 1,\n                                 textvariable = e$conf.level, width = 5)\n    tkpack(conf_level_scale, side = \"left\")\n    tkpack(conf_level_spin, side = \"left\")\n\n    #Function Radiobutton\n    put_label(e$layout, \"Alternative:\",4,0, sticky = \"e\")\n    rb_frame <- ttkframe(e$layout)\n    sapply(c(\"two.sided\",\"less\",\"greater\"), function(i) {\n               radio_button <- tk2radiobutton(rb_frame, variable = e$alternative,text = i, value = i)\n               tkpack(radio_button, side = \"left\")\n                                 })\n    tkgrid(rb_frame, row = 4, column = 1, sticky = \"w\")\n\n    #Equal Variance Checkbox\n    put_label ( e$layout , \"var.equal:\" , 5 , 0, sticky = \"e\")\n    var_equal_check <-ttkcheckbutton ( e$layout , variable = e$var)\n    tkgrid ( var_equal_check , row = 5 , column = 1 , stick = \"w\" ,padx = 2)\n\n    #Paired or Independent Checkbox\n    put_label ( e$layout , \"paired:\" , 6 , 0, sticky = \"e\")\n    paired_check <-ttkcheckbutton (e$layout , variable = e$paired)\n    tkgrid (paired_check , row = 6 , column = 1 , stick = \"w\" ,padx = 2)\n}\n\nrun.t <- function(e) {\n    varName1 <- getVarName(e, 1)\n    varValue1 <- get(varName1,e$dataFrame,inherits=TRUE)\n    assign(\"varValue1\", varValue1, envir = e)\n\n    varName2 <- getVarName(e, 2)\n    varValue2 <- get(varName2,e$dataFrame,inherits=TRUE)\n    assign(\"varValue2\", varValue2, envir = e)\n\n    paired <- as.numeric(tclvalue(e$paired))\n    assign(\"paired\", paired, envir = e)\n    var<-as.numeric(tclvalue(e$var))\n    assign(\"var\", var, envir = e)\n    conf.level<-NULL\n    conf.level<-as.numeric(tclvalue(e$conf.level))*.01\n    assign(\"conf.level\", conf.level, envir = e)\n    altselect <- tclvalue(e$alternative)\n    alternative <- switch(altselect , \"two.sided\" = altselect , \"less\" = altselect , \"greater\" = altselect )\n    assign(\"alternative\", altselect, envir = e)\n    out<-t.test(data= e$data, x=e$varValue1, y=e$varValue2, conf.level = e$conf.level, alternative = e$alternative, paired = e$paired, var.equal = e$var)\n    out$data.name<-paste(varName1, \"and\", varName2)\n    pos<-1\n    envir <- as.environment(pos)\n    assign(\"Results\", out, envir = envir)\n    print(out)\n    tkdestroy(e$wnd)\n}\n\n# onesam_tfun\nlayout.onesam_t<-function(e){\n    e$alternative <- tclVar(\"two.sided\");\n    e$conf.level <- tclVar(95);\n    e$mu <- tclVar(0);\n\n    #Begin GUI Setup\n    tkwm.title(e$wnd, \"One Sample t-test Dialog\")\n    tkconfigure(e$layout, text = \"One Sample t-test\")\n\n    #Mu Entry\n    put_label(e$layout, \"Mu:\",2,0, sticky = \"e\")\n    data_labels2 <- ttkentry(e$layout,\n                             textvariable = e$mu, width=5)\n    tkgrid(data_labels2, row = 2, column = 1, sticky=\"ew\", padx = 2)\n    tkfocus(data_labels2)\n\n    #Conf.level Slider\n    put_label(e$layout, \"conf.level:\", 3, 0, sticky = \"e\")\n    conf_level_frame <- ttkframe(e$layout)\n    tkgrid(conf_level_frame, row = 3, column = 1, columnspan = 2,\n           sticky = \"w\")\n    conf_level_scale <- ttkscale(conf_level_frame,\n                                 from = 75, to = 100,\n                                 variable = e$conf.level)\n    #Conf.level Spinbox\n    tkspinbox <- function(parent, ...)\n        tkwidget(parent, \"tk::spinbox\", ...)\n    conf_level_spin <- tkspinbox(conf_level_frame,\n                                 from = 75, to = 100, increment = 1,\n                                 textvariable = e$conf.level, width = 5)\n    tkpack(conf_level_scale, side = \"left\")\n    tkpack(conf_level_spin, side = \"left\")\n\n    #Function Radiobutton\n    put_label(e$layout, \"Alternative:\",4,0, sticky = \"e\")\n    rb_frame <- ttkframe(e$layout)\n    sapply(c(\"two.sided\",\"less\",\"greater\"), function(i) {\n               radio_button <- tk2radiobutton(rb_frame, variable = e$alternative,text = i, value = i)\n               tkpack(radio_button, side = \"left\")\n                                 })\n    tkgrid(rb_frame, row = 4, column = 1, sticky = \"w\")\n\n    #Iterations for when resampling is added\n    #put_label(label_frame, \"Iterations:\",6,0)\n    #iter_frame <- tkspinbox(label_frame, from = 10, to = 10000, increment = 10, textvariable = e$iter, width = 6)\n    #tkgrid(iter_frame, row = 6, column = 1, sticky=\"w\", padx = 2)\n}\n\nrun.onesam_t <- function(e) {\n    varName <- getVarName(e, 1)\n    varValue <- get(varName,e$dataFrame,inherits=TRUE)\n    assign(\"varValue\", varValue, envir = e)\n\n    conf.level<-as.numeric(tclvalue(e$conf.level))*.01\n    assign(\"conf.level\", conf.level, envir = e)\n    altselect <- tclvalue(e$alternative)\n    alternative <- switch(altselect , \"two.sided\" = altselect , \"less\" = altselect , \"greater\" = altselect )\n    assign(\"alternative\", altselect, envir = e)\n    out<- t.test(data= e$dataFrame, x=varValue, mu=as.numeric(tclvalue(e$mu)), conf.level = e$conf.level, alternative = e$alternative)\n    out$data.name<-paste(varName)\n    pos<-1\n    envir <- as.environment(pos)\n    assign(\"Results\", out, envir = envir)\n    print(out)\n    tkdestroy(e$wnd)\n}\n\n# shapirofun\nlayout.shapiro<-function(e){\n    e$qq<-tclVar(FALSE)\n\n    #Begin GUI Setup\n    tkwm.title(e$wnd, \"Shapiro-Wilk's test Dialog\")\n    tkconfigure(e$layout, text = \"Shapiro-Wilk's Test\")\n\n    #qqplot Checkbox\n    put_label ( e$layout, \"qqplot:\", 2, 0, sticky = \"e\")\n    qqplot_check <-ttkcheckbutton (e$layout , variable = e$qq)\n    tkgrid (qqplot_check , row = 2 , column = 1 , stick = \"w\" ,padx = 2)\n}\n\nrun.shapiro<-function(e){\n    varName <- getVarName(e, 1)\n    varValue <- get(varName,e$dataFrame,inherits=TRUE)\n    assign(\"varValue\", varValue, envir = e)\n\n    out<-shapiro.test(varValue)\n    out$data.name<-varName\n    pos<-1\n    envir <- as.environment(pos)\n    assign(\"Results\", out, envir = envir)\n    print(out)\n\n    #Plotting\n    if(tclvalue(e$qq)>0){\n        qqnorm(varValue)\n        qqline(varValue, col = 2)\n    }\n    tkdestroy(e$wnd)\n}\n\n# bartlettsfun\nlayout.bartletts<-function(e){\n    e$plot<-tclVar(FALSE)\n\n    #Begin GUI Setup\n    tkwm.title(e$wnd, \"Bartlett's test Dialog\")\n    tkconfigure(e$layout, text = \"Bartlett's Variance Test\")\n\n    tkconfigure(e$varLabel[[1]], text = \"Variable 1:\")\n    tkconfigure(e$varLabel[[2]], text = \"Variable 2:\")\n\n    #Plot Checkbox\n    put_label ( e$layout , \"plot:\" , 3 , 0, sticky = \"e\")\n    plot_check <-ttkcheckbutton (e$layout , variable = e$plot)\n    tkgrid (plot_check , row = 3 , column = 1 , stick = \"w\" ,padx = 2)\n}\n\nrun.bartletts<-function(e){\n    varName1 <- getVarName(e, 1)\n    varValue1 <- get(varName1,e$dataFrame,inherits=TRUE)\n    assign(\"varValue1\", varValue1, envir = e)\n\n    varName2 <- getVarName(e, 2)\n    varValue2 <- get(varName2,e$dataFrame,inherits=TRUE)\n    assign(\"varValue2\", varValue2, envir = e)\n\n    yvars<-c(e$varValue1)\n    factor<-as.factor(varValue2)\n    a<-paste(\"bartlett.test(\", \"yvars\", \" ~ \", \"factor\",\")\",sep = \"\")\n    out<-eval(parse(text = a))\n    out$data.name<-paste(varName1, \"and\", varName2)\n    pos<-1\n    envir <- as.environment(pos)\n    assign(\"Results\", out, envir = envir)\n    #print(a)\n    print(out)\n\n    #Plotting\n    if(tclvalue(e$plot)>0){\n      boxplot(yvars ~ factor, xlab=varName2, ylab=varName1)\n      stripchart(yvars ~ factor,pch=16, vert=TRUE, add=TRUE,cex=1)\n    }\n    tkdestroy(e$wnd)\n}\n\n# F_var_fun\nlayout.F_var <- function(e){\n    e$plot<-tclVar(FALSE)\n    e$alternative<-tclVar(\"two.sided\")\n    e$conf.level<-tclVar(95)\n\n    #Begin GUI Setup\n    tkwm.title(e$wnd, \"F Variance Test Dialog\")\n    tkconfigure(e$layout, text = \"F Variance Test\")\n\n    tkconfigure(e$varLabel[[1]], text = \"Variable 1:\")\n    tkconfigure(e$varLabel[[2]], text = \"Variable 2:\")\n\n    #Conf.level Slider\n    put_label(e$layout, \"conf.level:\", 3, 0, sticky = \"e\")\n    conf_level_frame <- ttkframe(e$layout)\n    tkgrid(conf_level_frame, row = 3, column = 1, columnspan = 2,\n           sticky = \"w\")\n    conf_level_scale <- ttkscale(conf_level_frame,\n                                 from = 75, to = 100,\n                                 variable = e$conf.level)\n    #Conf.level Spinbox\n    tkspinbox <- function(parent, ...)\n        tkwidget(parent, \"tk::spinbox\", ...)\n    conf_level_spin <- tkspinbox(conf_level_frame,\n                                 from = 75, to = 100, increment = 1,\n                                 textvariable = e$conf.level, width = 5)\n    tkpack(conf_level_scale, side = \"left\")\n    tkpack(conf_level_spin, side = \"left\")\n\n    #Hypothesis Radiobuttons\n    put_label(e$layout, \"Alternative:\",4,0, sticky = \"e\")\n    rb_frame <- ttkframe(e$layout)\n    sapply(c(\"two.sided\",\"less\",\"greater\"), function(i) {\n               radio_button <- tk2radiobutton(rb_frame, variable = e$alternative,text = i, value = i)\n               tkpack(radio_button, side = \"left\")\n                                 })\n    tkgrid(rb_frame, row = 4, column = 1, sticky = \"w\")\n\n    #Plot Checkbox\n    put_label ( e$layout , \"plot:\" , 5 , 0, sticky = \"e\")\n    plot_check <-ttkcheckbutton (e$layout , variable = e$plot)\n    tkgrid (plot_check , row = 5 , column = 1 , stick = \"w\" ,padx = 2)\n}\n\nrun.F_var <- function(e){\n    varName1 <- getVarName(e, 1)\n    varValue1 <- get(varName1,e$dataFrame,inherits=TRUE)\n    assign(\"varValue1\", varValue1, envir = e)\n\n    varName2 <- getVarName(e, 2)\n    varValue2 <- get(varName2,e$dataFrame,inherits=TRUE)\n    assign(\"varValue2\", varValue2, envir = e)\n\n    conf.level<-NULL\n    conf.level<-as.numeric(tclvalue(e$conf.level))*.01\n    assign(\"conf.level\", conf.level, envir = e)\n    altselect <- tclvalue(e$alternative)\n    alternative <- switch(altselect , \"two.sided\" = altselect , \"less\" = altselect , \"greater\" = altselect )\n    assign(\"alternative\", altselect, envir = e)\n    yvars<-c(e$varValue1)\n    factor<-as.factor(varValue2)\n    a<-paste(\"var.test(\", \"yvars\", \" ~ \", \"factor , \",\"conf.level=\",e$conf.level, \",alternative=\",\"'\",e$alternative,\"'\",\")\",sep = \"\")\n    out<-eval(parse(text = a))\n    out$data.name<-paste(varName1, \"and\", varName2)\n    pos<-1\n    envir <- as.environment(pos)\n    assign(\"Results\", out, envir = envir)\n    print(a)\n    print(out)\n\n    #Plotting\n    if(tclvalue(e$plot)>0){\n      boxplot(yvars ~ factor, xlab=varName2, ylab=varName1)\n      stripchart(yvars ~ factor,pch=16, vert=TRUE, add=TRUE,cex=1)\n    }\n    tkdestroy(e$wnd)\n}\n\n# LevenesVarTestFun\nlayout.LevenesVarTest <- function(e){\n    e$plot<-tclVar(FALSE)\n    e$center<-tclVar(\"mean\")\n\n    #Begin GUI Setup\n    tkwm.title(e$wnd, \"Levene's Variance Test Dialog\")\n    tkconfigure(e$layout, text = \"Levene's Variance Test\")\n\n    tkconfigure(e$varLabel[[1]], text = \"Variable 1:\")\n    tkconfigure(e$varLabel[[2]], text = \"Variable 2:\")\n\n    #Hypothesis Radiobuttons\n    put_label(e$layout, \"Center:\",3,0)\n    rb_frame <- ttkframe(e$layout)\n    sapply(c(\"mean\",\"median\"), function(i) {\n               radio_button <- tk2radiobutton(rb_frame, variable = e$center,text = i, value = i)\n               tkpack(radio_button, side = \"left\")\n                                 })\n    tkgrid(rb_frame, row = 3, column = 1, sticky = \"w\")\n\n    #Plot Checkbox\n    put_label ( e$layout , \"plot:\" , 5 , 0)\n    plot_check <-ttkcheckbutton (e$layout , variable = e$plot)\n    tkgrid (plot_check , row = 5 , column = 1 , stick = \"w\" ,padx = 2)\n}\n\nrun.LevenesVarTest<-function(e){\n    varName1 <- getVarName(e, 1)\n    varValue1 <- get(varName1,e$dataFrame,inherits=TRUE)\n    assign(\"varValue1\", varValue1, envir = e)\n\n    varName2 <- getVarName(e, 2)\n    varValue2 <- get(varName2,e$dataFrame,inherits=TRUE)\n    assign(\"varValue2\", varValue2, envir = e)\n\n    centselect <- tclvalue(e$center)\n    center <- switch(centselect , \"mean\" = centselect , \"median\" = centselect )\n    assign(\"center\", centselect, envir = e)\n    yvars<-c(e$varValue1)\n    factor<-as.factor(varValue2)\n    a<-paste(\"leveneTest(\", \"yvars\", \" ~ \", \"factor , \", \"center=\",center,\")\",sep = \"\")\n    out<-eval(parse(text = a))\n    pos<-1\n    envir <- as.environment(pos)\n    assign(\"Results\", out, envir = envir)\n    print(out)\n\n    #Plotting\n    if(tclvalue(e$plot)>0){\n      boxplot(yvars ~ factor, xlab=varName2, ylab=varName1)\n      stripchart(yvars ~ factor,pch=16, vert=TRUE, add=TRUE,cex=1)\n    }\n    tkdestroy(e$wnd)\n}\n\n# summar_fun\nlayout.summar <- function(e){\n    #Data Model: environment called \"e\"\n    e$type<-tclVar(\"Compact\")\n    #e$conf.level<-tclVar(95)\n\n    #Begin GUI Setup\n    tkwm.title(e$wnd, \"Data Summary Dialog\")\n    tkconfigure(e$layout, text = \"Data Summary\")\n\n    #Summary Radiobuttons\n    put_label(e$layout, \"Summary Type:\",2,0)\n    rb_frame <- ttkframe(e$layout)\n    sapply(c(\"Compact\",\"Detailed\"), function(i) {\n               radio_button <- tk2radiobutton(rb_frame, variable = e$type,text = i, value = i)\n               tkpack(radio_button, side = \"left\")\n                                 })\n    tkgrid(rb_frame, row = 2, column = 1, sticky = \"w\")\n}\n\nrun.summar <- function(e){\n    skew<-function (x, na.rm = TRUE) {\n        if (is.matrix(x))\n            apply(x, 2, skew, na.rm = na.rm)\n        else if (is.vector(x)) {\n            if (na.rm)\n                x <- x[!is.na(x)]\n        n <- length(x)\n        (sum((x - mean(x))^3)/n)/(sum((x - mean(x))^2)/n)^(3/2)\n        }\n        else if (is.data.frame(x))\n            sapply(x, skew, na.rm = na.rm)\n        else skew(as.vector(x), na.rm = na.rm)\n    }\n    kurt<-function (x, na.rm = TRUE) {\n        if (is.matrix(x))\n            apply(x, 2, kurt, na.rm = na.rm)\n        else if (is.vector(x)) {\n            if (na.rm)\n                x <- x[!is.na(x)]\n        n <- length(x)\n        n * sum((x - mean(x))^4)/(sum((x - mean(x))^2)^2)\n        }\n        else if (is.data.frame(x))\n            sapply(x, kurt, na.rm = na.rm)\n        else kurt(as.vector(x), na.rm = na.rm)\n    }\n\n    printfun<-function(k, varName){\n        summout<-c(round(var(k,na.rm=TRUE),2)\n                   ,round(sd(k,na.rm = TRUE),2)\n                   ,round(IQR(k,na.rm=TRUE),2)\n                   ,round(mean(k,na.rm=TRUE),2)\n                   ,round(median(k,na.rm=TRUE),2)\n                   ,round(skew(k,na.rm=TRUE),2)\n                   ,round(kurt(k,na.rm=TRUE),2)\n                   )\n        names(summout)<-c(\"Var\",\"SD\",\"IQR\",\"Mean\",\"Median\",\"Skewness\", \"Kurtosis\")\n        cat(\"\\n\",e$type,\"summary statistics of\", varName,\"\\n\\n\")\n        print(summout)\n        cat(\"\\n\")\n        cat(\"Percentiles\",\"\\n\")\n        print(quantile(k,c(0,.25,.5,.75,.9,.95,.99,1),na.rm=TRUE))\n        sumar<-c(summout,quantile(k,c(0,.25,.5,.75,.9,.95,.99,1),na.rm=TRUE))\n        return(sumar)\n    }\n\n    varName <- getVarName(e, 1)\n    varValue <- get(varName,e$dataFrame,inherits=TRUE)\n    assign(\"varValue\", varValue, envir = e)\n\n    typeselect <- tclvalue(e$type)\n    type <- switch(typeselect , \"Compact\" = typeselect , \"Detailed\" = typeselect )\n    assign(\"type\", typeselect, envir = e)\n    out<-printfun(varValue, varName)\n    pos<-1\n    envir <- as.environment(pos)\n    assign(\"Results\", out, envir = envir)\n    tkdestroy(e$wnd)\n}\n\n# Assoc_fun\nlayout.Assoc <- function(e){\n    e$pearson<-tclVar(FALSE)\n    e$spearman<-tclVar(FALSE)\n    e$kendall<-tclVar(FALSE)\n    e$cov<-tclVar(FALSE)\n    #e$gkGamma<-tclVar(FALSE)\n    e$alternative<-tclVar(\"two.sided\")\n    e$conf.level<-tclVar(95)\n    e$plot<-tclVar(FALSE)\n\n    #Begin GUI Setup\n    tkwm.title(e$wnd, \"Association Test Dialog\")\n    tkconfigure(e$layout, text = \"Association Tests\")\n\n    tkconfigure(e$varLabel[[1]], text = \"Variable 1:\")\n    tkconfigure(e$varLabel[[2]], text = \"Variable 2:\")\n\n    #Conf.level Slider\n    put_label(e$layout, \"conf.level:\", 3, 0)\n    conf_level_frame <- ttkframe(e$layout)\n    tkgrid(conf_level_frame, row = 3, column = 1, columnspan = 2,\n           sticky = \"w\")\n    conf_level_scale <- ttkscale(conf_level_frame,\n                                 from = 75, to = 100,\n                                 variable = e$conf.level)\n    #Conf.level Spinbox\n    tkspinbox <- function(parent, ...)\n        tkwidget(parent, \"tk::spinbox\", ...)\n    conf_level_spin <- tkspinbox(conf_level_frame,\n                                 from = 75, to = 100, increment = 1,\n                                 textvariable = e$conf.level, width = 5)\n    tkpack(conf_level_scale, side = \"left\")\n    tkpack(conf_level_spin, side = \"left\")\n\n    #Hypothesis Radiobuttons\n    put_label(e$layout, \"Alternative:\",4,0)\n    rb_frame <- ttkframe(e$layout)\n    sapply(c(\"two.sided\",\"less\",\"greater\"), function(i) {\n               radio_button <- tk2radiobutton(rb_frame, variable = e$alternative,text = i, value = i)\n               tkpack(radio_button, side = \"left\")\n                                 })\n    tkgrid(rb_frame, row = 4, column = 1, sticky = \"w\")\n\n    #Pearson's R Checkbox\n    put_label ( e$layout , \"Pearson's r:\" , 5 , 0)\n    pearson_check <-ttkcheckbutton (e$layout , variable = e$pearson)\n    tkgrid (pearson_check , row = 5 , column = 1 , stick = \"w\" ,padx = 0)\n\n    #Spearman's Rho Checkbox\n    put_label ( e$layout , \"Spearman's rho:\" , 5 , 1)\n    spearman_check <-ttkcheckbutton (e$layout , variable = e$spearman)\n    tkgrid (spearman_check , row = 5 , column = 2 , stick = \"w\" ,padx = 0)\n\n    #Kendall's Tau Checkbox\n    put_label ( e$layout , \"Kendall's tau:\" , 7 , 0)\n    kendall_check <-ttkcheckbutton (e$layout , variable = e$kendall)\n    tkgrid (kendall_check , row = 7 , column = 1 , stick = \"w\" ,padx = 0)\n\n    #Covariance Checkbox\n    put_label ( e$layout , \"Covariance:\" , 7 , 1)\n    cov_check <-ttkcheckbutton (e$layout , variable = e$cov)\n    tkgrid (cov_check , row = 7 , column = 2 , stick = \"w\" ,padx = 0)\n\n    #Plotting Checkbox\n    put_label ( e$layout , \"Plot:\" , 8 , 0)\n    plot_check <-ttkcheckbutton (e$layout , variable = e$plot)\n    tkgrid (plot_check , row = 8 , column = 1 , stick = \"w\" ,padx = 0)\n\n    # Goodman and Kruskal's Gamma Checkbox\n    #put_label ( label_frame , \"GK's gamma:\" , 7 , 1)\n    #gkGamma_check <-ttkcheckbutton (label_frame , variable = e$gkGamma)\n    #tkgrid (gkGamma_check , row = 7 , column = 2 , stick = \"w\" ,padx = 0)\n}\n\nrun.Assoc <- function(e){\n    varName1 <- getVarName(e, 1)\n    varValue1 <- get(varName1,e$dataFrame,inherits=TRUE)\n    assign(\"varValue1\", varValue1, envir = e)\n    varName2 <- getVarName(e, 2)\n    varValue2 <- get(varName2,e$dataFrame,inherits=TRUE)\n    assign(\"varValue2\", varValue2, envir = e)\n\n    pearson <- as.numeric(tclvalue(e$pearson))\n    assign(\"pearson\", pearson, envir = e)\n    spearman <- as.numeric(tclvalue(e$spearman))\n    assign(\"spearman\", spearman, envir = e)\n    kendall <- as.numeric(tclvalue(e$kendall))\n    assign(\"kendall\", kendall, envir = e)\n    covar <- as.numeric(tclvalue(e$cov))\n    assign(\"cov\", covar, envir = e)\n    #gkgamma <- as.numeric(tclvalue(e$gkGamma))\n    #assign(\"gkgamma\", gkgamma, envir = e)\n    conf.level<-NULL\n    conf.level<-as.numeric(tclvalue(e$conf.level))*.01\n    assign(\"conf.level\", conf.level, envir = e)\n    altselect <- tclvalue(e$alternative)\n    alternative <- switch(altselect , \"two.sided\" = altselect , \"less\" = altselect , \"greater\" = altselect )\n    assign(\"alternative\", altselect, envir = e)\n    if(e$pearson==1){\n        out1<- cor.test(x=varValue1, y=varValue2,\n                        alternative = e$alternative,\n                        method = \"pearson\",\n                        exact = NULL, conf.level = e$conf.level)\n        out1$data.name<-paste(varName1, \"and\", varName2)\n        pos<-1\n        envir <- as.environment(pos)\n        assign(\"Pearson_Results\", out1, envir = envir)\n        print(out1)\n    }\n    if(e$spearman==1){\n        out2<- cor.test(x=varValue1, y=varValue2,\n                        alternative = e$alternative,\n                        method = \"spearman\",\n                        exact = TRUE, conf.level = e$conf.level)\n        out2$data.name<-paste(varName1, \"and\", varName2)\n        pos<-1\n        envir <- as.environment(pos)\n        assign(\"Spearman_Results\", out2, envir = envir)\n        print(out2)\n    }\n    if(e$kendall==1){\n        out3<- cor.test(x=varValue1, y=varValue2,\n                        alternative = e$alternative,\n                        method = \"kendall\",\n                        exact = TRUE, conf.level = e$conf.level)\n        out3$data.name<-paste(varName1, \"and\", varName2)\n        pos<-1\n        envir <- as.environment(pos)\n        assign(\"Kendall_Results\", out3, envir = envir)\n        print(out3)\n    }\n    if(e$cov==1){\n        out4<- cov(x=varValue1, y=varValue2, use = \"everything\",\n                   method = \"pearson\")\n        names(out4)<-paste(\"Covariance of \",varName1, \"and\", varName2)\n        pos<-1\n        envir <- as.environment(pos)\n        assign(\"Covariance_Results\", out4, envir = envir)\n        print(out4)\n    }\n    #Plotting\n    if(as.numeric(tclvalue(e$plot))>0){\n        plot(x=varValue1, y=varValue2,xlab=varName1, ylab=varName2)\n    }\n    tkdestroy(e$wnd)\n}\n\n# Fisher_exact_fun\nlayout.Fisher_exact <- function(e){\n    e$plot<-tclVar(FALSE)\n    e$alternative<-tclVar(\"two.sided\")\n    e$conf.level<-tclVar(95)\n    e$simulate<-tclVar(FALSE)\n    e$nsims<-tclVar(0)\n\n    #Begin GUI Setup\n    tkwm.title(e$wnd, \"Fisher's Exact Test Dialog\")\n    tkconfigure(e$layout, text = \"Fisher's Exact Test\")\n    tkconfigure(e$varLabel[[1]], text = \"Variable 1:\")\n    tkconfigure(e$varLabel[[2]], text = \"Variable 2:\")\n\n    #Conf.level Slider\n    put_label(e$layout, \"conf.level:\", 3, 0)\n    conf_level_frame <- ttkframe(e$layout)\n    tkgrid(conf_level_frame, row = 3, column = 1, columnspan = 2,\n           sticky = \"w\")\n    conf_level_scale <- ttkscale(conf_level_frame,\n                                 from = 75, to = 100,\n                                 variable = e$conf.level)\n    #Conf.Level Spinbox\n    tkspinbox <- function(parent, ...)\n        tkwidget(parent, \"tk::spinbox\", ...)\n    conf_level_spin <- tkspinbox(conf_level_frame,\n                                 from = 75, to = 100, increment = 1,\n                                 textvariable = e$conf.level, width = 5)\n    tkpack(conf_level_scale, side = \"left\")\n    tkpack(conf_level_spin, side = \"left\")\n\n    #Hypothesis Radiobuttons\n    put_label(e$layout, \"Alternative:\",4,0)\n    rb_frame <- ttkframe(e$layout)\n    sapply(c(\"two.sided\",\"less\",\"greater\"), function(i) {\n               radio_button <- tk2radiobutton(rb_frame, variable = e$alternative,text = i, value = i)\n               tkpack(radio_button, side = \"left\")\n                                 })\n    tkgrid(rb_frame, row = 4, column = 1, sticky = \"w\")\n\n    #Monte Carlo Slider\n    put_label(e$layout, \"Monte Carlo:\", 5, 0)\n    MC_frame <- ttkframe(e$layout)\n    tkgrid(MC_frame, row = 5, column = 1, columnspan = 2,\n           sticky = \"w\")\n    MC_scale <- ttkscale(MC_frame,\n                         from = 0, to = 10000,\n                         variable = e$nsims)\n    #Monte Carlo Spinbox\n    tkspinbox <- function(parent, ...)\n        tkwidget(parent, \"tk::spinbox\", ...)\n    MC_spin <- tkspinbox(MC_frame,\n                         from = 0, to = 10000, increment = 1,\n                         textvariable = e$nsims, width = 5)\n    tkpack(MC_scale, side = \"left\")\n    tkpack(MC_spin, side = \"left\")\n\n    #Plot Checkbox\n    #put_label ( label_frame , \"plot:\" , 6 , 0)\n    #plot_check <-ttkcheckbutton (label_frame , variable = e$plot)\n    #tkgrid (plot_check , row = 6 , column = 1 , stick = \"w\" ,padx = 2)\n}\n\nrun.Fisher_exact <- function(e){\n    varName1 <- getVarName(e, 1)\n    varValue1 <- get(varName1,e$dataFrame,inherits=TRUE)\n    assign(\"varValue1\", varValue1, envir = e)\n    varName2 <- getVarName(e, 2)\n    varValue2 <- get(varName2,e$dataFrame,inherits=TRUE)\n    assign(\"varValue2\", varValue2, envir = e)\n\n    conf.level<-NULL\n    conf.level<-as.numeric(tclvalue(e$conf.level))*.01\n    assign(\"conf.level\", conf.level, envir = e)\n    altselect <- tclvalue(e$alternative)\n    alternative <- switch(altselect , \"two.sided\" = altselect , \"less\" = altselect , \"greater\" = altselect )\n    assign(\"alternative\", altselect, envir = e)\n    nsims<-tclvalue(e$nsims)\n    assign(\"nsims\", nsims, envir = e)\n    simulate<-as.logical(as.numeric(tclvalue(e$simulate)))\n    assign(\"simulate\", simulate, envir = e)\n    if(e$nsims>0){\n        e$simulate<-TRUE\n    }\n    tab<-table(x=varValue1, y=varValue2)\n    names(attributes(tab)$dimnames)<-c(varName1,varName2)\n    out<-fisher.test(tab,alternative = e$alternative, conf.int = TRUE, conf.level = e$conf.level, simulate.p.value=e$simulate, B=e$nsims)\n    out$data.name<-paste(varName1, \"and\", varName2)\n    out<-list(Table=tab, Test=out)\n    pos<-1\n    envir <- as.environment(pos)\n    assign(\"Results\", out, envir = envir)\n    cat(\"\\nTabulated Data\\n\")\n    print(tab)\n    cat(\"\\n\")\n    print(out$Test)\n\n    #Plotting\n    if(tclvalue(e$plot)>0){\n        vals<-c(varValue1, varValue2)\n        names<-as.factor(c(rep(varName1,length(varValue1)),rep(varName2,length(varValue2))))\n        boxplot(vals ~ names)\n        stripchart(vals ~ names,pch=16, vert=TRUE, add=TRUE,cex=1)\n    }\n    tkdestroy(e$wnd)\n}\n\n# chisq_fun\nlayout.chisq<-function(e){\n    e$plot<-tclVar(FALSE)\n    e$correct<-tclVar(FALSE)\n    e$simulate<-tclVar(FALSE)\n    e$nsims<-tclVar(0)\n\n    #Begin GUI Setup\n    tkwm.title(e$wnd, \"Pearson's Chi-squared Test Dialog\")\n    tkconfigure(e$layout, text = \"Pearson's Chi-squared Test\")\n    tkconfigure(e$varLabel[[1]], text = \"Variable 1:\")\n    tkconfigure(e$varLabel[[2]], text = \"Variable 2:\")\n\n    #Monte Carlo Slider\n    put_label(e$layout, \"Monte Carlo:\", 3, 0)\n    MC_frame <- ttkframe(e$layout)\n    tkgrid(MC_frame, row = 3, column = 1, columnspan = 2,\n           sticky = \"w\")\n    MC_scale <- ttkscale(MC_frame,\n                         from = 0, to = 10000,\n                         variable = e$nsims)\n    #Monte Carlo Spinbox\n    tkspinbox <- function(parent, ...)\n        tkwidget(parent, \"tk::spinbox\", ...)\n    MC_spin <- tkspinbox(MC_frame,\n                         from = 0, to = 10000, increment = 1,\n                         textvariable = e$nsims, width = 5)\n    tkpack(MC_scale, side = \"left\")\n    tkpack(MC_spin, side = \"left\")\n\n    #Yate's Correction Checkbox\n    put_label ( e$layout , \"Yate's Correction:\" , 4 , 0)\n    yates_check <-ttkcheckbutton (e$layout , variable = e$correct)\n    tkgrid (yates_check , row = 4 , column = 1 , stick = \"w\" ,padx = 2)\n\n    #Plot Checkbox\n    #put_label ( label_frame , \"plot:\" , 6 , 0)\n    #plot_check <-ttkcheckbutton (label_frame , variable = e$plot)\n    #tkgrid (plot_check , row = 6 , column = 1 , stick = \"w\" ,padx = 2)\n}\n\nrun.chisq<-function(e){\n    varName1 <- getVarName(e, 1)\n    varValue1 <- get(varName1,e$dataFrame,inherits=TRUE)\n    assign(\"varValue1\", varValue1, envir = e)\n    varName2 <- getVarName(e, 2)\n    varValue2 <- get(varName2,e$dataFrame,inherits=TRUE)\n    assign(\"varValue2\", varValue2, envir = e)\n    correct<-as.logical(as.numeric(tclvalue(e$correct)))\n    assign(\"correct\", correct, envir = e)\n    nsims<-as.numeric(tclvalue(e$nsims))\n    assign(\"nsims\", nsims, envir = e)\n    simulate<-as.logical(as.numeric(tclvalue(e$simulate)))\n    assign(\"simulate\", simulate, envir = e)\n    if(e$nsims>0){\n        e$simulate<-TRUE\n    }\n    tab<-table(x=varValue1, y=varValue2)\n    names(attributes(tab)$dimnames)<-c(varName1,varName2)\n    out<-chisq.test(tab, correct=e$correct, simulate.p.value=e$simulate, B=e$nsims,rescale.p = FALSE)\n    out$pvals<-out$stdres\n    out$pvals[out$stdres<0]<-pnorm(out$stdres[out$stdres<0],lower.tail = TRUE)\n    out$pvals[out$stdres>0]<-pnorm(out$stdres[out$stdres>0],lower.tail = FALSE)\n    out$data.name<-paste(varName1, \"and\", varName2)\n    pos<-1\n    envir <- as.environment(pos)\n    assign(\"Results\", out, envir = envir)\n    cat(\"\\nObserved Data\\n\")\n    print(tab)\n    cat(\"\\n\")\n    print(out)\n\n    #Plotting\n    if(as.numeric(tclvalue(e$plot))>0){\n        vals<-c(varValue1, varValue2)\n        names<-as.factor(c(rep(varName1,length(varValue1)),rep(varName2,length(varValue2))))\n        boxplot(vals ~ names)\n        stripchart(vals ~ names,pch=16, vert=TRUE, add=TRUE,cex=1)\n    }\n    tkdestroy(e$wnd)\n}\n\n# oneway_fun\nlayout.oneway<-function(e){\n    e$plot<-tclVar(FALSE)\n\n    #Begin GUI Setup\n    tkwm.title(e$wnd, \"One-way ANOVA Dialog\")\n    tkconfigure(e$layout, text = \"One-way ANOVA\")\n    tkconfigure(e$varLabel[[1]], text = \"Response:\")\n    tkconfigure(e$varLabel[[2]], text = \"Variable 1:\")\n\n    #Plot Checkbox # not yet operational (within OK function)\n    put_label ( e$layout , \"plot:\" , 5 , 0,sticky=\"e\")\n    plot_check <-ttkcheckbutton (e$layout , variable = e$plot)\n    tkgrid (plot_check , row = 5 , column = 1 , stick = \"w\" ,padx = 2)\n}\n\nrun.oneway<-function(e){\n    respVarName <- getVarName(e, 1)\n    varName1 <- getVarName(e, 2)\n\n    f1<-paste(respVarName, \"~\", varName1)\n    f1<-eval(parse(text=f1))\n    out<-lm(f1,data=e$dataFrame)\n    out$ANOVAtab<-anova(out)\n    pos<-1\n    envir <- as.environment(pos)\n    assign(\"Results\", out, envir = envir)\n    print(anova(out))\n    print(summary(out))\n\n    #Plotting function bells and whistles after the analytical stuff is up to \"snuff\"\n    if(as.numeric(tclvalue(e$plot))>0){\n        ci.bars<-function(ybar,ci,label,ylab) {\n            xv<-barplot(ybar,ylim=c(0,max(ybar+ci)),names=label,ylab=ylab,beside=T)\n            g<-(max(xv)-min(xv))/50\n            for (i in 1:length(xv)){\n                lines(c(xv[i],xv[i]),c(ybar[i]+ci[i],ybar[i]-ci[i]))\n                lines(c(xv[i]-g,xv[i]+g),c(ybar[i]+ci[i], ybar[i]+ci[i]))\n                lines(c(xv[i]-g,xv[i]+g),c(ybar[i]-ci[i], ybar[i]-ci[i]))\n            }\n        }\n        me<-aggregate(f1,data=e$dataFrame,FUN=mean)\n        gnames<-as.character(me[,1])\n        gmeans<-(me[,2])\n        ci<- (aggregate(f1,data=e$dataFrame,FUN=sd)[,2]/aggregate(f1,data=e$dataFrame,FUN=length)[,2])*1.96\n        ci.bars(gmeans,ci,gnames,ylab=\"response\")\n    }\n    tkdestroy(e$wnd)\n}\n\n# fact_fun\nlayout.fact<-function(e){\n    e$plot<-tclVar(FALSE)\n\n    #Begin GUI Setup\n    tkwm.title(e$wnd, \"Factorial ANOVA Dialog\")\n    tkconfigure(e$layout, text = \"Two way ANOVA\")\n    tkconfigure(e$varLabel[[1]], text = \"Response:\")\n    tkconfigure(e$varLabel[[2]], text = \"Variable 1:\")\n    tkconfigure(e$varLabel[[3]], text = \"Variable 2:\")\n\n    #Plot Checkbox #not yet operational (within OK function)\n    put_label ( e$layout , \"plot:\" , 5 , 0,sticky=\"e\")\n    plot_check <-ttkcheckbutton (e$layout , variable = e$plot)\n    tkgrid (plot_check , row = 5 , column = 1 , stick = \"w\" ,padx = 2)\n}\n\nrun.fact<-function(e){\n    if(tclvalue(e$interaction)!=\"NULL\" & getVarName(e, 3)!=\"Choose Factor 2\"){\n        f1<-paste(getVarName(e, 1),\"~\",\n                  getVarName(e, 2),\n                  tclvalue(e$interaction),\n                  getVarName(e, 3))\n        f1<-eval(parse(text=f1))\n    }\n    if(tclvalue(e$interaction)==\"NULL\"){\n        f1<-paste(getVarName(e, 1),\"~\",\n                  getVarName(e, 2))\n        f1<-eval(parse(text=f1))\n    }\n    out<-lm(f1,data=e$dataFrame)\n    out$ANOVAtab<-anova(out)\n    pos<-1\n    envir <- as.environment(pos)\n    assign(\"Results\", out, envir = envir)\n    print(anova(out))\n    print(summary(out))\n    tkdestroy(e$wnd)\n}\n\n# simp_lmfun\nlayout.simp_lm<-function(e){\n    e$plot<-tclVar(FALSE)\n\n    #Begin GUI Setup\n    tkwm.title(e$wnd, \"Simple Linear Regression Dialog\")\n    tkconfigure(e$layout, text = \"Simple Linear Regression\")\n    tkconfigure(e$varLabel[[1]], text = \"Response:\")\n    tkconfigure(e$varLabel[[2]], text = \"Predictor Variable:\")\n\n    #Plot Checkbox\n    put_label ( e$layout , \"plot:\" , 5 , 0,sticky=\"e\")\n    plot_check <-ttkcheckbutton (e$layout , variable = e$plot)\n    tkgrid (plot_check , row = 5 , column = 1 , stick = \"w\" ,padx = 2)\n}\n\nrun.simp_lm<-function(e){\n    respVarName <- getVarName(e, 1)\n    preVarName <- getVarName(e, 2)\n\n    f1<-eval(paste(respVarName, \"~\", preVarName))\n    out<-lm(f1,data=e$dataFrame)\n    out$ANOVAtab<-anova(out)\n    pos<-1\n    envir <- as.environment(pos)\n    assign(\"Results\", out, envir = envir)\n    print(anova(out))\n    print(summary(out))\n    #plotting function bells and whistles after the analytical stuff is up to \"snuff\"\n    if(as.numeric(tclvalue(e$plot))>0){\n        #graph viewer\n        # hscale <- 2    # Horizontal scaling\n        #vscale <- 2   # Vertical scaling\n        # plot.shap <- function() {\n        ###plotting functions\n        #}\n        #graph <- tkrplot(label_frame, fun = plot.shap,\n        #                 hscale = hscale, vscale = vscale)\n        #tkgrid(graph, row = 3, column = 1, rowspan = 1, sticky = \"w\", padx = 2)\n        e$dataFrame$pred<-predict(out,se.fit = TRUE)$fit\n        e$dataFrame$hici<-e$dataFrame$pred + 1.96*predict(out,se.fit = TRUE)$se.fit\n        e$dataFrame$loci<-e$dataFrame$pred - 1.96*predict(out,se.fit = TRUE)$se.fit\n        e$dataFrame<-e$dataFrame[order(e$dataFrame$pred),]\n        x<-e$dataFrame[,which(names(e$dataFrame)==preVarName)]\n        y<-e$dataFrame[,which(names(e$dataFrame)==respVarName)]\n        xpred<-data.frame(xpred=seq(min(x),max(x),length.out = 1000))\n        colnames(xpred)<-preVarName\n        predi<-predict(out , se.fit=TRUE,newdata = xpred)\n        ypred<-predi$fit\n        ypredlo<-ypred - predi$se.fit*1.96\n        ypredhi<-ypred + predi$se.fit*1.96\n        plot(xpred[,1],ypred,type=\"n\",xlab=preVarName,\n             ylab=respVarName,ylim=range(c(ypredlo,ypredhi)))\n        polygon(c(xpred[,1],rev(xpred[,1])),c(ypredlo,rev(ypredhi))\n                ,col=\"light gray\",border=NA)\n        points(x, y,bg=\" dark gray\",pch=21,cex=1)\n        lines(xpred[,1], ypred,col=\"black\",lwd=2)\n        #ggplot(e$dataFrame, aes(x)) +\n        # geom_point(aes(x=x,y=y), colour=\"black\", size=2) +\n        #geom_ribbon(aes(ymin=loci, ymax=hici), alpha=0.7,fill=\"dark gray\")+\n        #geom_line(aes(y=pred), colour=\"red\",size=1.5) +\n        #ylab(tclvalue(e$responsevariablename))+xlab(tclvalue(e$varName1))+\n        #theme_bw() +\n        #theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),\n        #     panel.background = element_blank(), axis.line = element_line(colour = \"black\"))\n    }\n    tkdestroy(e$wnd)\n}\n\n# glmfun to be used for simple two-variable regression and two-way anova with interaction effects\nlayout.glm<-function(e){\n    e$distfx<-tclVar(\"gaussian\")\n    e$linkfx<-tclVar(\"identity\")\n    e$plot<-tclVar(FALSE)\n\n    #Begin GUI Setup\n    tkwm.title(e$wnd, \"Generalized Linear Model Dialog\")\n    tkconfigure(e$layout, text = \"Generalized Linear Model\")\n    tkconfigure(e$varLabel[[1]], text = \"Response:\")\n    tkconfigure(e$varLabel[[2]], text = \"Variable 1:\")\n    tkconfigure(e$varLabel[[3]], text = \"Variable 2:\")\n\n    #Distribution Combobox (Family)\n    put_label(e$layout, \"Distribution:\",row=3,column=1,sticky=\"n\")\n    data_labels5 <- ttkcombobox(e$layout, state=\"readonly\",\n                                values = c(\"gaussian\",\"binomial\",\"poisson\", \"Gamma\"),\n                                textvariable = e$distfx,width=25)\n    tkgrid(data_labels5, row = 4, column = 1, sticky = \"ew\", padx = 2)\n    tkfocus(data_labels5)\n\n    #Link Combobox (transform function)\n    put_label(e$layout, \"Link:\",row=3,column=2,sticky=\"n\")\n    data_labels5 <- ttkcombobox(e$layout, state=\"readonly\",\n                                values = c(\"identity\", \"logit\",\"log\",\"inverse\"),\n                                textvariable = e$linkfx,width=25)\n    tkgrid(data_labels5, row = 4, column = 2, sticky = \"ew\", padx = 2)\n    tkfocus(data_labels5)\n\n    #Plot Checkbox # not yet operational (within OK function)\n    put_label ( e$layout , \"plot:\" , 5 , 0,sticky=\"e\")\n    plot_check <-ttkcheckbutton (e$layout , variable = e$plot)\n    tkgrid (plot_check , row = 5 , column = 1 , stick = \"w\" ,padx = 2)\n}\n\nrun.glm<-function(e){\n    if(tclvalue(e$interaction)!=\"NULL\" & getVarName(e, 3)!=\"Choose Predictor Variable 2\"){\n        f1<-paste(getVarName(e, 1),\"~\",\n                  getVarName(e, 2),\n                  tclvalue(e$interaction),\n                  getVarName(e, 3))\n        f1<-eval(parse(text=f1))\n    }\n    if(tclvalue(e$interaction)==\"NULL\"){\n        f1<-paste(getVarName(e, 1),\"~\",\n                  getVarName(e, 2))\n        f1<-eval(parse(text=f1))\n    }\n    #Link Function Inside Distribution\n    lin<-eval(parse(text=paste(tclvalue(e$distfx),\"(link=\",tclvalue(e$linkfx),\")\",sep=\"\")))\n    out<-glm(f1,data=e$dataFrame,family=lin)\n    out$anovatab<-anova(out)\n    pos<-1\n    envir <- as.environment(pos)\n    assign(\"Results\", out, envir = envir)\n    print(anova(out))\n    print(summary(out))\n    tkdestroy(e$wnd)\n}\n\n",
    "created" : 1503168107536.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "76|30|380|0|\n645|28|687|0|\n724|37|748|0|\n",
    "hash" : "279345117",
    "id" : "40BBD8ED",
    "lastKnownWriteTime" : 1503171326,
    "last_content_update" : 1503171326848,
    "path" : "E:/Dropbox (LCA)/Documents/bitbucket/zooarchgui/R/UnivariateStatistics.r",
    "project_path" : "R/UnivariateStatistics.r",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}